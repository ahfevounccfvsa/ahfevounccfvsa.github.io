<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cmlanche</title>
  
  <subtitle>金鳞岂是池中物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cmlanche.com/"/>
  <updated>2019-03-31T09:52:16.000Z</updated>
  <id>http://www.cmlanche.com/</id>
  
  <author>
    <name>cmlanche</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>主机排行网重大更新，移动端自适应</title>
    <link href="http://www.cmlanche.com/2019/03/31/%E4%B8%BB%E6%9C%BA%E6%8E%92%E8%A1%8C%E7%BD%91%E9%87%8D%E5%A4%A7%E6%9B%B4%E6%96%B0%EF%BC%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://www.cmlanche.com/2019/03/31/主机排行网重大更新，移动端自适应/</id>
    <published>2019-03-31T08:55:24.000Z</published>
    <updated>2019-03-31T09:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前有网友反馈，<a href="https://hostingranking.cn/" target="_blank" rel="noopener">主机排行网</a>在移动端表现太丑了，希望我改改，今天周末，我专门花了两个多小时来好好把移动短整治了一下，比以前好看多了。</p><h3 id="对比改变"><a href="#对比改变" class="headerlink" title="对比改变"></a>对比改变</h3><p>对比一下吧，下图是前版本的主机排行网：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/d9fyk.gif" alt="hostingranking-old-mobile"></p><a id="more"></a><p>新版效果：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/2zaim.gif" alt="hostingranking-new-mobile"></p><h3 id="本次修改的过程"><a href="#本次修改的过程" class="headerlink" title="本次修改的过程"></a>本次修改的过程</h3><p>我此前也从没真正做过移动端适配的事情，只是初步了解是通过媒体查询来做的，即当浏览器界面满足一定大小时，就会触发该媒体查询器所包含的css。</p><p>主机排行网用的css框架是bootstrap4，而bs在自适应方面是沉淀了十多年的，很强悍。我参照官网教程：<a href="https://getbootstrap.com/" target="_blank" rel="noopener">https://getbootstrap.com/</a>，重新改版了排行页中的两列布局，此前的代码是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-10"</span>&gt;</span></span><br><span class="line">    // part 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span></span><br><span class="line">    // part 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的两列布局代码会让我的界面始终是两列的，因为这里没有其他的col修饰，<code>.col-</code>在屏幕是任何大小时都生效，如果我们想让界面缩小到一定时，两列变一列，那么就不能用<code>.col-</code>来修饰了，我根据我的需求，在界面大于960px才触发两列布局，所有这里要把<code>.col-</code>改为<code>.col-lg-</code>。</p><p>这个改动完了，我希望当界面缩小到1000px以下时，主机特征那部分隐藏掉，并且在界面小于720px时隐藏掉详细评价按钮，不然内容太挤，放不小。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/n880q.png" alt="image-20190331171600304"></p><p>此时bs就没有相关的类来帮助你了，需要自己动手写媒体查询：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span>(max-width: 1000px) &#123;</span><br><span class="line">  <span class="selector-class">.features</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span>(max-width: 720px) &#123;</span><br><span class="line">  <span class="selector-class">.btns</span> &#123;</span><br><span class="line">    :nth-child(2) &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结收获"><a href="#总结收获" class="headerlink" title="总结收获"></a>总结收获</h3><p>此前一直不想做移动端的适配，是因为觉得很难，其实有了bs的帮助这个功能真的很好做，凡是多尝试多探索，不要不做就放弃了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此前有网友反馈，&lt;a href=&quot;https://hostingranking.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;主机排行网&lt;/a&gt;在移动端表现太丑了，希望我改改，今天周末，我专门花了两个多小时来好好把移动短整治了一下，比以前好看多了。&lt;/p&gt;
&lt;h3 id=&quot;对比改变&quot;&gt;&lt;a href=&quot;#对比改变&quot; class=&quot;headerlink&quot; title=&quot;对比改变&quot;&gt;&lt;/a&gt;对比改变&lt;/h3&gt;&lt;p&gt;对比一下吧，下图是前版本的主机排行网：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/d9fyk.gif&quot; alt=&quot;hostingranking-old-mobile&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我也来碎碎念 - 主机排行网运营一个月小结</title>
    <link href="http://www.cmlanche.com/2019/03/29/%E6%88%91%E4%B9%9F%E6%9D%A5%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://www.cmlanche.com/2019/03/29/我也来碎碎念/</id>
    <published>2019-03-29T03:00:19.000Z</published>
    <updated>2019-03-30T10:09:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我也来碎碎念-主机排行网运营一个月小结"><a href="#我也来碎碎念-主机排行网运营一个月小结" class="headerlink" title="我也来碎碎念 - 主机排行网运营一个月小结"></a>我也来碎碎念 - 主机排行网运营一个月小结</h3><blockquote><p>学习<a href="https://toolinbox.net" target="_blank" rel="noopener">iPic作者Jason</a>每周一的碎碎念，我也来碎碎念了，只有我有新的想法灵感，我就会立马记录下来，不管内容有多少。</p></blockquote><p>今天要总结一下我的产品：主机排行网 <a href="https://hostingranking.cn" target="_blank" rel="noopener">HostingRanking.cn</a></p><a id="more"></a><h3 id="盈利模式"><a href="#盈利模式" class="headerlink" title="盈利模式"></a>盈利模式</h3><p>主机排行网的盈利模式很简单，就是<strong>推广返利</strong>，做affiliate链接推广，最终目标要把最好的主机带给大家，做好全面评测，不断优化迭代版本。带给大家价值了，我这个产品才有意义。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>目前不断更新迭代有17个版本，115个提交记录，7个分支了，主机排行网也在<a href="https://www.vultr.com/?ref=7779694-4F" target="_blank" rel="noopener">Vultr</a> 日本VPS上稳定运行一个月了。</li></ol><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/pyuba.png" alt="image-20190329111148149"></p><ol start="2"><li><p>谁说<a href="https://www.vultr.com/?ref=7779694-4F" target="_blank" rel="noopener">Vultr VPS</a>的IP总是被封，为啥我就从来没有，你被封肯定是用来搭梯子了吧。</p></li><li><p>到目前为止预计可营收大概有1100元</p><ol><li><a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=mm1tv2if" target="_blank" rel="noopener">阿里云</a>云大使：611元</li></ol><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/rwl7k.png" alt="image-20190329111728872"></p><ol start="2"><li><a href="https://www.vultr.com/?ref=7779694-4F" target="_blank" rel="noopener">Vultr VPS</a>有两个推广，50美金</li></ol><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/mfkt4.png" alt="image-20190329111809713"></p><ol start="3"><li><a href="https://m.do.co/c/3b2f0f749606" target="_blank" rel="noopener">DigitalOcean</a>有1个有效推广，25美金</li></ol></li></ol><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/5ne7c.png" alt="image-20190329111829521"></p><h3 id="关于推广"><a href="#关于推广" class="headerlink" title="关于推广"></a>关于推广</h3><p>目前网站的流量都是自己推一下才有人看，不推就没有，这不是<strong>良性</strong>的，也比较消耗自己的时间，最好是流量来自自然搜索，这样就比较省事了，关键是流量最大的百度SEO很不好做，百度SEO一向不是很公平，所以我想先做好谷歌和必应的搜索。百度慢慢做好了。</p><h3 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h3><p>通常国内独立开发不会写自己产品的盈利模式和收入来源，我这里完全开放出来，不排斥有同行跟我做一样的网站，也欢迎你做，如果你做了，到时候告诉我，我们互加友链，中国市场这么大，不怕再多你一人。😊</p><h3 id="独立开发者微信群"><a href="#独立开发者微信群" class="headerlink" title="独立开发者微信群"></a>独立开发者微信群</h3><p>目前我运营维护一个独立开发者群，里面有月入几万的大神，也有去学习的菜鸟，欢迎加入。加我微信cmlanche，我拉你进去。目前已有327人，快满了，手慢无啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我也来碎碎念-主机排行网运营一个月小结&quot;&gt;&lt;a href=&quot;#我也来碎碎念-主机排行网运营一个月小结&quot; class=&quot;headerlink&quot; title=&quot;我也来碎碎念 - 主机排行网运营一个月小结&quot;&gt;&lt;/a&gt;我也来碎碎念 - 主机排行网运营一个月小结&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;学习&lt;a href=&quot;https://toolinbox.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iPic作者Jason&lt;/a&gt;每周一的碎碎念，我也来碎碎念了，只有我有新的想法灵感，我就会立马记录下来，不管内容有多少。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天要总结一下我的产品：主机排行网 &lt;a href=&quot;https://hostingranking.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HostingRanking.cn&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎碎念" scheme="http://www.cmlanche.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="主机排行网" scheme="http://www.cmlanche.com/tags/%E4%B8%BB%E6%9C%BA%E6%8E%92%E8%A1%8C%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>我的最佳写作方式</title>
    <link href="http://www.cmlanche.com/2019/02/26/%E6%88%91%E7%9A%84%E6%9C%80%E4%BD%B3%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.cmlanche.com/2019/02/26/我的最佳写作方式/</id>
    <published>2019-02-26T02:37:13.000Z</published>
    <updated>2019-03-01T00:02:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近喜欢上了写作，喜欢自己写的东西能被别人阅读，赞赏，也希望我写的东西能更有价值，体验也更好。</p><p>今天我分享的是我的最佳写作方式。</p><h1 id="我的最佳写作方式"><a href="#我的最佳写作方式" class="headerlink" title="我的最佳写作方式"></a>我的最佳写作方式</h1><p>工具汇总</p><table><thead><tr><th>markdown编辑器</th><th>截图工具</th><th>gif录制工具</th><th>图床工具</th></tr></thead><tbody><tr><td>Typora</td><td>QQ / wechat</td><td>licecap</td><td>iPic</td></tr></tbody></table><h3 id="markdown编辑器-·-Typora"><a href="#markdown编辑器-·-Typora" class="headerlink" title="markdown编辑器 · Typora"></a>markdown编辑器 · Typora</h3><p>完全免费的markdown编辑器，无与伦比的写作体验，让人爱不释手，具体的特性请移步官网：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p><p>我最常用的快捷键是<kbd>Command</kbd>+<kbd>/</kbd>，可以切换源码模式和打字机模式。</p><a id="more"></a><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/7a652.gif" alt="typora"></p><h3 id="图传工具-·-iPic"><a href="#图传工具-·-iPic" class="headerlink" title="图传工具 · iPic"></a>图传工具 · iPic</h3><p>仅仅有好的编辑器还不够，还需要图床工具将你的图片自动上传到云端，最好是能够结合你使用的markdown编辑器一起使用，最好是截图后直接粘贴，然后上传。</p><p>那么iPic是首选，因为Typora内置了iPic的功能，如下图：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/nmryc.gif" alt="ipic"></p><p>iPic支持很多种图传工具，我现在用的是腾讯COS，这个工具默认是免费的，但是默认只支持免费的新浪微博图传，如果你要使用其他图传就要收费了，年费50元。</p><p>iPic的作者是全职独立开发者Jason，已经写了很多类似的mac工具，都很优秀，官网：<a href="https://toolinbox.net/" target="_blank" rel="noopener">https://toolinbox.net/</a></p><h3 id="截图工具-·-QQ"><a href="#截图工具-·-QQ" class="headerlink" title="截图工具 · QQ"></a>截图工具 · QQ</h3><p>QQ和微信截图应该是大家都在用的，非常方便，截图后可以粘贴到任何地方，QQ还支持视频录制功能。</p><h3 id="gif录制工具-·-licecap"><a href="#gif录制工具-·-licecap" class="headerlink" title="gif录制工具 · licecap"></a>gif录制工具 · licecap</h3><p>这里我就要介绍强大的LICEcap了，用来做屏幕截图的，录制出来的gif很小，我的所有gif都是通过它来制作的。</p><p>详细请移步官网：<a href="https://www.cockos.com/licecap/" target="_blank" rel="noopener">https://www.cockos.com/licecap/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近喜欢上了写作，喜欢自己写的东西能被别人阅读，赞赏，也希望我写的东西能更有价值，体验也更好。&lt;/p&gt;
&lt;p&gt;今天我分享的是我的最佳写作方式。&lt;/p&gt;
&lt;h1 id=&quot;我的最佳写作方式&quot;&gt;&lt;a href=&quot;#我的最佳写作方式&quot; class=&quot;headerlink&quot; title=&quot;我的最佳写作方式&quot;&gt;&lt;/a&gt;我的最佳写作方式&lt;/h1&gt;&lt;p&gt;工具汇总&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;markdown编辑器&lt;/th&gt;
&lt;th&gt;截图工具&lt;/th&gt;
&lt;th&gt;gif录制工具&lt;/th&gt;
&lt;th&gt;图床工具&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Typora&lt;/td&gt;
&lt;td&gt;QQ / wechat&lt;/td&gt;
&lt;td&gt;licecap&lt;/td&gt;
&lt;td&gt;iPic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;markdown编辑器-·-Typora&quot;&gt;&lt;a href=&quot;#markdown编辑器-·-Typora&quot; class=&quot;headerlink&quot; title=&quot;markdown编辑器 · Typora&quot;&gt;&lt;/a&gt;markdown编辑器 · Typora&lt;/h3&gt;&lt;p&gt;完全免费的markdown编辑器，无与伦比的写作体验，让人爱不释手，具体的特性请移步官网：&lt;a href=&quot;https://typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://typora.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我最常用的快捷键是&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;/&lt;/kbd&gt;，可以切换源码模式和打字机模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="写作方式" scheme="http://www.cmlanche.com/tags/%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSDN、博客园等6大技术博客平台的写作体验测评</title>
    <link href="http://www.cmlanche.com/2019/02/25/CSDN%E3%80%81%E5%8D%9A%E5%AE%A2%E5%9B%AD%E7%AD%896%E5%A4%A7%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%86%99%E4%BD%9C%E4%BD%93%E9%AA%8C%E6%B5%8B%E8%AF%84/"/>
    <id>http://www.cmlanche.com/2019/02/25/CSDN、博客园等6大技术博客平台的写作体验测评/</id>
    <published>2019-02-25T07:38:38.000Z</published>
    <updated>2019-03-12T12:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能对比"><a href="#功能对比" class="headerlink" title="功能对比"></a>功能对比</h1><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/kgs2s.png" alt="QQ20190312-201125@2x"></p><a id="more"></a><h1 id="markdown编辑器写作体验比较"><a href="#markdown编辑器写作体验比较" class="headerlink" title="markdown编辑器写作体验比较"></a>markdown编辑器写作体验比较</h1><blockquote><p>markdown标准语法请参考：<a href="https://commonmark.org/" target="_blank" rel="noopener">CommonMark</a>, 学习指南<a href="https://commonmark.org/help/tutorial/，而本文要比较的各家markdown编辑器遵守的协议都不太一样，比如csdn在标准语法上做了更多事情，如图片支持大小和居中设定，这一点虽好，但其他平台不支持，那也导致你的文章不具备通用性。所以我们并不需要独特的支持，都遵守标准语法，文章的移植性就更强。" target="_blank" rel="noopener">https://commonmark.org/help/tutorial/，而本文要比较的各家markdown编辑器遵守的协议都不太一样，比如csdn在标准语法上做了更多事情，如图片支持大小和居中设定，这一点虽好，但其他平台不支持，那也导致你的文章不具备通用性。所以我们并不需要独特的支持，都遵守标准语法，文章的移植性就更强。</a></p></blockquote><h3 id="1-segmentfault-com-体验5星，极好"><a href="#1-segmentfault-com-体验5星，极好" class="headerlink" title="1. segmentfault.com  体验5星，极好"></a>1. segmentfault.com  体验5星，极好</h3><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/fami8.png" alt="sf-markdown"></p><p>markdown语法说明：<a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">https://segmentfault.com/markdown</a></p><p>segmentfault只支持markdonwn编辑器，是因为它是最新的平台，然后面向的用户都是程序员群体，而markdown已经是大家默认的使用的编辑器，这是共识，csdn前几年都不支持markdown，现在都支持了，会用markdown已经是程序员群体最基础的能力，所以它不需要支持富文本编辑器，有点多余。</p><p><strong>特点：</strong></p><ol><li><p>界面<strong>简洁</strong>，没有多余的东西</p></li><li><p><strong>聚焦当前写作行</strong>，实时预览</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/2i6hz.gif" alt="sf-hotline"></p></li><li><p>发布原创可<strong>注明版权</strong>，同时可以<strong>同步到新浪微博</strong>，支持<strong>定时发布</strong></p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/eojwa.gif" alt="sf-pub"></p></li></ol><ol start="4"><li><p>可以给文章设置预定的标签，创建一个系统不存在的标签要求你的声望值达到1500。这样其实很有好处，可以让segmentfault整个系统共用一套标签体系，可以把相同兴趣的人组织到一块，同时也避免了标签混乱。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/nhb9e.gif" alt="sf-tags"></p></li></ol><h3 id="2-CSDN-体验5星，极好"><a href="#2-CSDN-体验5星，极好" class="headerlink" title="2. CSDN 体验5星，极好"></a>2. CSDN 体验5星，极好</h3><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/294mx.png" alt="csdn-overview"></p><p>csdn的markdown编辑器很强大，支持很全面，图片也支持大小和居中设置。刚打开编辑器的时候，就告诉你所有csdn的增强版markdown语法知识。</p><p>markdown增强点有：</p><ol><li><p>新增文章目录语法：<code>@[TOC](文章目录)</code></p></li><li><p>图片支持大小和居中设定</p></li><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；<ol start="4"><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法[^1]</strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol></li></ol><h3 id="3-开源中国-OSChina-net-体验3星，一般"><a href="#3-开源中国-OSChina-net-体验3星，一般" class="headerlink" title="3. 开源中国 OSChina.net  体验3星，一般"></a>3. 开源中国 OSChina.net  体验3星，一般</h3><p>开源中国的markdown编辑器体验很差，做的比较敷衍，我随便找个开源的都能做成这样。</p><p>而且markdown也不是默认编辑器，说明也不注重这一块。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/7mpls.gif" alt="oschina-overvie"></p><h3 id="4-博客园-cnblogs-com-体验1星，极差"><a href="#4-博客园-cnblogs-com-体验1星，极差" class="headerlink" title="4. 博客园 cnblogs.com 体验1星，极差"></a>4. 博客园 cnblogs.com 体验1星，极差</h3><p>博客园的markdown编辑器就太差了，没有任何写作体验，就是一个输入框，让你把提前写好的markdown文本贴进去了事，也没有预览功能，写了啥也不知道。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/4xe8k.gif" alt="cnblogs-overview"></p><p>可能有很多朋友还不知道怎么启用markdown编辑器呢，在后台页面【选项】-【默认编辑器】-【Markdown】</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/z3wqy.gif" alt="cnblogs-sddf"></p><h3 id="5-知乎-无markdown编辑器，富文本编辑器体验5星，极好"><a href="#5-知乎-无markdown编辑器，富文本编辑器体验5星，极好" class="headerlink" title="5. 知乎 无markdown编辑器，富文本编辑器体验5星，极好"></a>5. 知乎 无markdown编辑器，富文本编辑器体验5星，极好</h3><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/6ixt6.png" alt="image-20190225174431609"></p><p>知乎面向的客户是全社会各类的人，绝大多数并不是程序员群体，所有知乎是不会支持markdown编辑器的。</p><p>虽然这样，知乎还是提供给我们强大的定制的富文本编辑器，主要特性有：</p><ol><li>界面简洁</li><li>图片支持一次性上传多张</li><li>支持文章封面</li></ol><h3 id="6-简书-评价5星，很好"><a href="#6-简书-评价5星，很好" class="headerlink" title="6. 简书 评价5星，很好"></a>6. 简书 评价5星，很好</h3><p>简书面向的群体也不只是it技术人员，程序员群体仅仅是很小的一部分，但仍旧支持markdown编辑器，只是不是默认的编辑器而已，富文本的支持也很好，主要有如下特点：</p><ol><li><p>文集形式，不仅仅包含编辑器，一次性打开所有文章，方便你随时切换其他文章进行修改</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/rxvql.png" alt="image-20190225175222900"></p></li><li><p>和知乎一样，一次性可上传多张图片</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/tja3e.png" alt="image-20190225175542580"></p></li><li><p>支持数学公式，并有友好的提示。</p><ol><li>常用表达式</li><li>常用函数</li><li>希腊字母</li><li>常用符号</li><li>特殊符号</li></ol><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/z4trn.gif" alt="jianshu"></p><p>简书切换markdown的方式比较隐蔽，在左下角的设置切换：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/c9v2f.png" alt="image-20190226115056789"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;功能对比&quot;&gt;&lt;a href=&quot;#功能对比&quot; class=&quot;headerlink&quot; title=&quot;功能对比&quot;&gt;&lt;/a&gt;功能对比&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/kgs2s.png&quot; alt=&quot;QQ20190312-201125@2x&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="评测" scheme="http://www.cmlanche.com/tags/%E8%AF%84%E6%B5%8B/"/>
    
      <category term="csdn" scheme="http://www.cmlanche.com/tags/csdn/"/>
    
      <category term="博客园" scheme="http://www.cmlanche.com/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>面试题·HashMap和Hashtable的区别(转载再整理)</title>
    <link href="http://www.cmlanche.com/2019/02/25/HashMap%E5%92%8CHashtable%E7%9A%84%E5%8C%BA%E5%88%AB(%E8%BD%AC)/"/>
    <id>http://www.cmlanche.com/2019/02/25/HashMap和Hashtable的区别(转)/</id>
    <published>2019-02-25T03:26:49.000Z</published>
    <updated>2019-02-26T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接： <a href="http://javarevisited.blogspot.hk/2010/10/difference-between-hashmap-and.html" target="_blank" rel="noopener">Javarevisited</a> 翻译： <a href="http://www.importnew.com/" target="_blank" rel="noopener">ImportNew.com </a>- <a href="http://www.importnew.com/author/tangxiaojuan" target="_blank" rel="noopener">唐小娟</a><br>译文链接： <a href="http://www.importnew.com/7010.html" target="_blank" rel="noopener">http://www.importnew.com/7010.html</a></p></blockquote><p>HashMap和Hashtable的比较是Java面试中的常见问题，用来考验程序员是否能够正确使用集合类以及是否可以随机应变使用多种思路解决问题。HashMap的工作原理、ArrayList与Vector的比较以及这个问题是有关Java 集合框架的最经典的问题。Hashtable是个过时的集合类，存在于Java API中很久了。在Java 4中被重写了，实现了Map接口，所以自此以后也成了Java集合框架中的一部分。Hashtable和HashMap在Java面试中相当容易被问到，甚至成为了集合框架面试题中最常被考的问题，所以在参加任何Java面试之前，都不要忘了准备这一题。</p><p>这篇文章中，我们不仅将会看到HashMap和Hashtable的区别，还将看到它们之间的相似之处。</p><a id="more"></a><h3 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h3><p>HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。</p><ol><li>HashMap几乎可以等价于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。</li><li>HashMap是非synchronized，而Hashtable是synchronized，这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；而如果没有正确的同步的话，多个线程是不能共享HashMap的。Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。</li><li>另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。</li><li>由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。</li><li>HashMap不能保证随着时间的推移Map中的元素次序是不变的。</li></ol><h3 id="要注意的一些重要术语："><a href="#要注意的一些重要术语：" class="headerlink" title="要注意的一些重要术语："></a>要注意的一些重要术语：</h3><ol><li><p>sychronized意味着在一次仅有一个线程能够更改Hashtable。就是说任何线程要更新Hashtable时要首先获得同步锁，其它线程要等到同步锁被释放之后才能再次获得同步锁更新Hashtable。</p></li><li><p>Fail-safe和iterator迭代器相关。如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</p></li><li><p>结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</p></li></ol><h3 id="我们能否让HashMap同步？"><a href="#我们能否让HashMap同步？" class="headerlink" title="我们能否让HashMap同步？"></a>我们能否让HashMap同步？</h3><p>HashMap可以通过下面的语句进行同步：<br>Map m = Collections.synchronizeMap(hashMap);</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Hashtable和HashMap有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，Hashtable是java 4时代的过时产物，ConcurrentHashMap是它的替代品。而如果你使用Java 5或以上的话，请使用ConcurrentHashMap吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接： &lt;a href=&quot;http://javarevisited.blogspot.hk/2010/10/difference-between-hashmap-and.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Javarevisited&lt;/a&gt; 翻译： &lt;a href=&quot;http://www.importnew.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ImportNew.com &lt;/a&gt;- &lt;a href=&quot;http://www.importnew.com/author/tangxiaojuan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;唐小娟&lt;/a&gt;&lt;br&gt;译文链接： &lt;a href=&quot;http://www.importnew.com/7010.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.importnew.com/7010.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HashMap和Hashtable的比较是Java面试中的常见问题，用来考验程序员是否能够正确使用集合类以及是否可以随机应变使用多种思路解决问题。HashMap的工作原理、ArrayList与Vector的比较以及这个问题是有关Java 集合框架的最经典的问题。Hashtable是个过时的集合类，存在于Java API中很久了。在Java 4中被重写了，实现了Map接口，所以自此以后也成了Java集合框架中的一部分。Hashtable和HashMap在Java面试中相当容易被问到，甚至成为了集合框架面试题中最常被考的问题，所以在参加任何Java面试之前，都不要忘了准备这一题。&lt;/p&gt;
&lt;p&gt;这篇文章中，我们不仅将会看到HashMap和Hashtable的区别，还将看到它们之间的相似之处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hashmap" scheme="http://www.cmlanche.com/tags/hashmap/"/>
    
      <category term="hashtable" scheme="http://www.cmlanche.com/tags/hashtable/"/>
    
      <category term="面试题" scheme="http://www.cmlanche.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hostingranking.cn·基于ghost的轻量技术架构整理</title>
    <link href="http://www.cmlanche.com/2019/02/24/hostingranking.cn%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.cmlanche.com/2019/02/24/hostingranking.cn技术架构/</id>
    <published>2019-02-24T05:40:05.000Z</published>
    <updated>2019-03-13T03:02:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇纯粹只讲<a href="https://hostingranking.cn" target="_blank" rel="noopener">hostingranking.cn</a>网站的技术架构，也就是怎么做到的，达到什么效果。至于它是什么，为什么要做暂且不说，另篇会分享。</p></blockquote><h3 id="技术组成"><a href="#技术组成" class="headerlink" title="技术组成"></a>技术组成</h3><p>首先hostingranking.cn是基于ghost博客平台而构建的，ghost最强大的部分就是可以最大限度的让你DIY网站，能力特别强。如下是技术组成图：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/o6rge.png" alt="image-20190224143748243"></p><h3 id="技术讲解"><a href="#技术讲解" class="headerlink" title="技术讲解"></a>技术讲解</h3><table><thead><tr><th></th><th>运行环境</th><th>用途</th></tr></thead><tbody><tr><td>Ghost</td><td>Nodejs</td><td>博客平台，可供主题创作的环境，博客管理，SEO等一系列可插拔的功能</td></tr><tr><td>JQuery</td><td>Javascript</td><td>前端js交互</td></tr><tr><td>handlebar</td><td>-</td><td>网页模板</td></tr><tr><td>spring boot</td><td>java</td><td>提供后端服务，连接第三方服务</td></tr><tr><td>typeform</td><td></td><td>第三方问卷调查服务</td></tr><tr><td>mailchimp</td><td></td><td>第三方邮件服务</td></tr></tbody></table><a id="more"></a><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>ghost主题制作，呈现网站基本内容</li><li>个性化主机推荐</li><li>博客</li></ol><h4 id="ghost主题制作"><a href="#ghost主题制作" class="headerlink" title="ghost主题制作"></a>ghost主题制作</h4><p>ghost主题制作非常简单，只要你会写js+html+css即可制作，另外最好要学会handlebar模板语言，会让你制作主题事半功倍，入门制作教程参考我另一篇文章：<a href="https://cmlanche.com/2018/08/26/%E5%88%B6%E4%BD%9Cghost%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">https://cmlanche.com/2018/08/26/%E5%88%B6%E4%BD%9Cghost%E4%B8%BB%E9%A2%98/</a></p><h4 id="个性化主机推荐"><a href="#个性化主机推荐" class="headerlink" title="个性化主机推荐"></a>个性化主机推荐</h4><p>#####基本流程如下</p><ol><li>采用typeform来制作表单</li><li>开启typeform的webhook，意思就是当客户提交表单的时候，会往这个webhook url发送一个post请求，来告诉你有用户提交了，以及提交的数据。</li><li>spring boot是我们的后端服务，专门用来制作webhook接口的，不要把webhook想的很神圣，没什么难的，webhook接口其实就是一个普通接口，只是它被用来处理webhook发送来的数据罢了。</li><li>spring boot收到typeform提交的问卷信息后，去调用mailchimp的api，创建邮件，发送给客户。</li></ol><h5 id="活动图如下"><a href="#活动图如下" class="headerlink" title="活动图如下"></a>活动图如下</h5><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/7yo6p.png" alt="image-20190224145254076"></p><p>我最终通过spring Boot接收webhook传递过来的不同数据，生成不同的推荐结果。</p><p>你可以在<a href="https://hostingranking.cn" target="_blank" rel="noopener">hostingranking.cn</a>的实现效果，看自己是否能收到邮件，收到的是什么。</p><h3 id="typeform"><a href="#typeform" class="headerlink" title="typeform"></a>typeform</h3><p>强大的问卷调查产品，体验无与伦比，生成的文件简单简洁，完整的api支撑，对刚起步的新手产品免费支持，更重要的是，支持中文！在国内访问畅通无阻！下图是我hostingranking.cn产品涉及到的问卷设计：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/g3dpx.png" alt="QQ20190224-145959@2x"></p><h3 id="mailchimp"><a href="#mailchimp" class="headerlink" title="mailchimp"></a>mailchimp</h3><p>世界上最常用的邮箱市场营销工具，好处如下：</p><ol><li>完全的开放，完整的api支持，支持用zapper连接上百款常用产品</li><li>中国访问速度还可以，用api调用无碍</li><li>诚意满满的新手产品扶助计划，帮助新产品达到足够规模再收费！</li></ol><p>按照上面说的个性化功能，当你提交问卷之后，我的mailchimp后台会看到发送状态，以及打开和点击的状态，如下图：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/cdi8l.png" alt="QQ20190224-150720@2x"></p><blockquote><p>一点吐槽：看到typeform和mailchimp，我想国外的东西做的真是开放，各种api都支持，反观国内，则各种保护，就比如知乎、博客园、segmentfault等都是不开放api的，这点让我觉得国内还不够开放。</p></blockquote><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>博客功能是ghost内置的核心功能，刚刚开发好(2019-03-13)，访问：<a href="https://hostingranking.cn/blog" target="_blank" rel="noopener">https://hostingranking.cn/blog</a></p><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>hostingranking.cn网站托管在<a href="http://bit.ly/tryvultr" target="_blank" rel="noopener">Vultr</a>主机上，买的最低配的VPS，每个月5美金</p><p>如果你要买它的主机并且你的主要客户在大陆的话，你一定要买日本的主机，不要买美国和新加坡的，因为日本的平均ping值是最低的，大约一百多，新加坡的主机会绕过日本再到中国，慢一些，而美国的大概两三百。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇纯粹只讲&lt;a href=&quot;https://hostingranking.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hostingranking.cn&lt;/a&gt;网站的技术架构，也就是怎么做到的，达到什么效果。至于它是什么，为什么要做暂且不说，另篇会分享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;技术组成&quot;&gt;&lt;a href=&quot;#技术组成&quot; class=&quot;headerlink&quot; title=&quot;技术组成&quot;&gt;&lt;/a&gt;技术组成&lt;/h3&gt;&lt;p&gt;首先hostingranking.cn是基于ghost博客平台而构建的，ghost最强大的部分就是可以最大限度的让你DIY网站，能力特别强。如下是技术组成图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/o6rge.png&quot; alt=&quot;image-20190224143748243&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;技术讲解&quot;&gt;&lt;a href=&quot;#技术讲解&quot; class=&quot;headerlink&quot; title=&quot;技术讲解&quot;&gt;&lt;/a&gt;技术讲解&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;运行环境&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ghost&lt;/td&gt;
&lt;td&gt;Nodejs&lt;/td&gt;
&lt;td&gt;博客平台，可供主题创作的环境，博客管理，SEO等一系列可插拔的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JQuery&lt;/td&gt;
&lt;td&gt;Javascript&lt;/td&gt;
&lt;td&gt;前端js交互&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;handlebar&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;网页模板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring boot&lt;/td&gt;
&lt;td&gt;java&lt;/td&gt;
&lt;td&gt;提供后端服务，连接第三方服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;typeform&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第三方问卷调查服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mailchimp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第三方邮件服务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="hostingranking.cn" scheme="http://www.cmlanche.com/tags/hostingranking-cn/"/>
    
      <category term="技术架构" scheme="http://www.cmlanche.com/tags/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>程序员的微创业</title>
    <link href="http://www.cmlanche.com/2019/02/24/%E5%BE%AE%E5%88%9B%E4%B8%9A/"/>
    <id>http://www.cmlanche.com/2019/02/24/微创业/</id>
    <published>2019-02-24T01:00:10.000Z</published>
    <updated>2019-03-13T03:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/zgc28.jpg" alt="v2-6cea99c48c9aa053b6bd6bbcd70f3631_hd"></p><p>不知道有没有觉得程序员是吃青春饭的；</p><p>有没有发现很多公司的招聘需求上写着35岁以上不要；</p><p>有没有发现一转眼都已奔三，却依旧一事无成，无房无车；</p><h3 id="怎么办？"><a href="#怎么办？" class="headerlink" title="怎么办？"></a>怎么办？</h3><p>我想过创业，我也创业过，15年的时候和同学一块做人脸识别，种种原因最后没成功，此前两年的积蓄也清零，创业？人家都说是九死一生，我说就是，在你没有足够人脉钱脉的时候你去创业，无异于以卵击石。</p><p>程序员是吃请青春饭的，因为这个行业加班最严重，年轻人不断涌上，没时间谈恋爱，谈了恋爱的不敢结婚，结婚的不敢生孩子，生孩子了也不能自己养，要爸妈带，中国现在社会就是这样，年轻人压力巨大，上有老下有小，奔三的我感觉鸭梨山大。</p><p>既然不能创业那就好好工作，把工作的事情做好，我也觉得，但是2018年底都知道大裁员，公司也未必是可靠的，如果你没有足够好的技能和其他的收入傍身，最后哭的怎么不会是你？</p><a id="more"></a><h3 id="地心引力"><a href="#地心引力" class="headerlink" title="地心引力"></a>地心引力</h3><p>这个社会是一张网紧紧的黏住你，让你无法动弹，无法很好的去世界各地自己想去的地方，无法任性而为还本真的自我，要想摆脱这种地心引力，你要实现的目标就是要实现财务自由，这样你将不再受到工作、家庭的制约。</p><h3 id="财务自由"><a href="#财务自由" class="headerlink" title="财务自由"></a>财务自由</h3><p>近十几年，不同的人，实现财务自由的方式不尽然相同。</p><p>有些人天生就财务自由，爸妈给的，就像王思聪，可能你姓王，但是你爸不是王健林；</p><p>有些人搭上了不错的“班车”，比如滴滴，美团，小米，公司给予了丰厚股票奖励，也实现了财务自由，很可惜我并没有搭上。</p><p>有些人运气比较好，赶上14年股市普涨，又能及时悬崖勒马，狠狠赚了一匹，但我觉得这只是让你一下子突然获得了一箩筐的“鱼”，你没有鱼竿，等你的鱼都吃完的时候，你还是没法学会更好的生存。</p><p>同样的还有炒比特币的，赌场要是赚了，不要高兴太早，及早收心。</p><p>而绝大多数人，是没有这个福气和运气的，很多都同我一样，默默无闻。</p><p>我想实现财务自由，那怎么办呢？</p><h3 id="让我们微创业吧"><a href="#让我们微创业吧" class="headerlink" title="让我们微创业吧"></a>让我们微创业吧</h3><p>先让我们牢记第一条使命，就是把工作上老板交代的活干好</p><p>然后是<strong>有余力</strong>，就<strong>微创业</strong>吧</p><p>微创业，目标是在不影响工作的情况下，额外的创收。</p><h3 id="都有哪些做法？"><a href="#都有哪些做法？" class="headerlink" title="都有哪些做法？"></a>都有哪些做法？</h3><p>第一就是接外包，这种方式来钱明显，但是很多外包都是想要最少的钱，让别人干最多的活，十分的累，还不如工作赚的多，而且十分影响你现在的工作，我极力反对用这个方式创收。</p><p>第二就是要在工作之外把自己变成独立的开发者，依靠我们自身的技术优势，来做点小而美的产品，例如iPic的作者Jason（产品经理出生，为了做独立开发者，自学ios相关的技术，<a href="https://toolinbox.net/" target="_blank" rel="noopener">https://toolinbox.net/</a>），还有码力全开工作室<a href="http://maliquankai.com/" target="_blank" rel="noopener">http://maliquankai.com/</a>的Larry，虽然我们中绝大多数人没办法像他们一样做全职的独立开发者，但是我们在工作中好好打磨一款产品，等它的收入达到一定时，你就可以全职来彻底搞它了。</p><h3 id="关键：坚持"><a href="#关键：坚持" class="headerlink" title="关键：坚持"></a>关键：坚持</h3><p>选好点子，然后就是要长期坚持，如果你放弃了，这一切都完了！</p><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><ol><li>我一直在努力的网站：主机排行网 <a href="https://hostingranking.cn/" target="_blank" rel="noopener">https://hostingranking.cn/</a></li><li>后续我会慢慢分享独立开发者心得和干货</li><li>加我好友，拉你进独立开发者群</li></ol><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/kz0mn.png" alt="image-20190227154108985"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/zgc28.jpg&quot; alt=&quot;v2-6cea99c48c9aa053b6bd6bbcd70f3631_hd&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知道有没有觉得程序员是吃青春饭的；&lt;/p&gt;
&lt;p&gt;有没有发现很多公司的招聘需求上写着35岁以上不要；&lt;/p&gt;
&lt;p&gt;有没有发现一转眼都已奔三，却依旧一事无成，无房无车；&lt;/p&gt;
&lt;h3 id=&quot;怎么办？&quot;&gt;&lt;a href=&quot;#怎么办？&quot; class=&quot;headerlink&quot; title=&quot;怎么办？&quot;&gt;&lt;/a&gt;怎么办？&lt;/h3&gt;&lt;p&gt;我想过创业，我也创业过，15年的时候和同学一块做人脸识别，种种原因最后没成功，此前两年的积蓄也清零，创业？人家都说是九死一生，我说就是，在你没有足够人脉钱脉的时候你去创业，无异于以卵击石。&lt;/p&gt;
&lt;p&gt;程序员是吃请青春饭的，因为这个行业加班最严重，年轻人不断涌上，没时间谈恋爱，谈了恋爱的不敢结婚，结婚的不敢生孩子，生孩子了也不能自己养，要爸妈带，中国现在社会就是这样，年轻人压力巨大，上有老下有小，奔三的我感觉鸭梨山大。&lt;/p&gt;
&lt;p&gt;既然不能创业那就好好工作，把工作的事情做好，我也觉得，但是2018年底都知道大裁员，公司也未必是可靠的，如果你没有足够好的技能和其他的收入傍身，最后哭的怎么不会是你？&lt;/p&gt;
    
    </summary>
    
    
      <category term="程序员" scheme="http://www.cmlanche.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="微创业" scheme="http://www.cmlanche.com/tags/%E5%BE%AE%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>安装指定版本的node的方法</title>
    <link href="http://www.cmlanche.com/2019/01/23/%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84node/"/>
    <id>http://www.cmlanche.com/2019/01/23/安装指定版本的node/</id>
    <published>2019-01-23T13:19:19.000Z</published>
    <updated>2019-02-24T00:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装指定版本的node的方法"><a href="#安装指定版本的node的方法" class="headerlink" title="安装指定版本的node的方法"></a>安装指定版本的node的方法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm cache clean -f  # 清除缓存</span><br><span class="line">sudo npm install -g n # 安装node版本工具n</span><br><span class="line">sudo n 10.13.0 # 10.13.0 是版本号</span><br><span class="line"><span class="meta">#</span> sudo n stable # 安装当前最新的最稳定版本的node</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装指定版本的node的方法&quot;&gt;&lt;a href=&quot;#安装指定版本的node的方法&quot; class=&quot;headerlink&quot; title=&quot;安装指定版本的node的方法&quot;&gt;&lt;/a&gt;安装指定版本的node的方法&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="nodejs" scheme="http://www.cmlanche.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>开闭原则</title>
    <link href="http://www.cmlanche.com/2018/12/10/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>http://www.cmlanche.com/2018/12/10/开闭原则/</id>
    <published>2018-12-10T03:00:57.000Z</published>
    <updated>2019-02-26T06:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再谈开闭原则"><a href="#再谈开闭原则" class="headerlink" title="再谈开闭原则"></a>再谈开闭原则</h1><p>最开始了解设计模式之开闭原则是在6年前，那个时候我还是在校大学生，我是读《设计模式之禅》了解到它的。开闭原则是说，对扩展开发，对修改关闭，当时我看书的时候还不太了解它的含义，只知道这是设计模式最重要的原则，其他5大原则（如最小接口原则、迪米特原则、里式替换原则等）都是为了更好的实现开闭原则而总结出来的一套方法论，而书中说的23大设计模式都是基于这些模式的实践。</p><p>今天我又一次感受到了开闭原则的牛逼，我感受到，它不仅仅可以用在实际的代码编写上，对整个系统的架构都有指导借鉴意义。</p><a id="more"></a><p>我目前负责的是我司自动化测试的执行流程，今天有个需求是要给各个手机agent server添加一个doctor的诊断命令。目前的架构是这样的，有3个手机agent server，分别是Robotium、UIAutomator和iOS的XCUTest，执行端这边负责建立socket短连接与这3个agent server进行通信，目前在我写的一个AgentManger来协调管理他们，这部分已经完美运行一年半了，改动很小，需求是现在要添加一个新命令doctor，然而我发现这三个agent server都通过socket连接，但他们的通信内容的协议居然完全不一样，Robotium agent server这边是以“OKEY%s”来格式化返回值，单不看整个的通信架构是否合理，就这个返回的字符串我就很想吐槽，哪有这样的？！通常都是用统一格式的JSON来表达返回结果的，不管是几个agent server，都可以用一套处理模式来处理，甚至分出一个独立的工程模块来做这件事情，而UIAutomator Agent server它的返回值的结构则是{‘success’: true, ‘msg’: ‘xxxxx’}的一个json结构，这个表示也很糟糕，虽然是json的，但是只有true和false两种状态，如果你说你把它改一下不就行了吗，但是你要知道，以往的工程已经积累了几十个接口了，如果去改它以前的通信结构，那么会改动特别大，整个程序要进行回归测试才可以重新上线，所以从一开始就设计出统一的通信协议是多么重要，而如果是在统一的模块中处理的话，那就更容易了，只要在这个模块中更改协议就好了，做少量测试就可以知道你的改动是否覆盖所有的接口，这样可以大大减少后面的工作量！</p><p>再联系到我们的开闭原则，原则说，要对修改关闭，对扩展开放，上面的那个垃圾通信协议结构，你要对它进行修改是无比的困难，而添加新的接口，又会让这样的垃圾结构继续存在，当某一天你发现这样的通信结构无法满足要求时，你会发现你必须得修改，也就是要重构了。所以从一开始设计出一套能够更容易扩展，无需修改的结构是多么重要！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;再谈开闭原则&quot;&gt;&lt;a href=&quot;#再谈开闭原则&quot; class=&quot;headerlink&quot; title=&quot;再谈开闭原则&quot;&gt;&lt;/a&gt;再谈开闭原则&lt;/h1&gt;&lt;p&gt;最开始了解设计模式之开闭原则是在6年前，那个时候我还是在校大学生，我是读《设计模式之禅》了解到它的。开闭原则是说，对扩展开发，对修改关闭，当时我看书的时候还不太了解它的含义，只知道这是设计模式最重要的原则，其他5大原则（如最小接口原则、迪米特原则、里式替换原则等）都是为了更好的实现开闭原则而总结出来的一套方法论，而书中说的23大设计模式都是基于这些模式的实践。&lt;/p&gt;
&lt;p&gt;今天我又一次感受到了开闭原则的牛逼，我感受到，它不仅仅可以用在实际的代码编写上，对整个系统的架构都有指导借鉴意义。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开闭原则" scheme="http://www.cmlanche.com/tags/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    
      <category term="设计模式" scheme="http://www.cmlanche.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面基</title>
    <link href="http://www.cmlanche.com/2018/08/26/%E9%9D%A2%E5%9F%BA%E9%9D%92%E6%98%A5%E6%97%A0%E7%BD%AA/"/>
    <id>http://www.cmlanche.com/2018/08/26/面基青春无罪/</id>
    <published>2018-08-26T10:41:07.000Z</published>
    <updated>2019-02-24T00:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>“青春无罪”是我QQ群（518914410）的一个网友，是我第一个线下交流的网友，是北工大仪器测量专业方向的博士生，为人非常爽朗，乐于助人。今天跟他见面非常开心，跟他学习了很多，主要有两点要说的：</p><p>第一就是不要着急，做好当下需要做的事情，一步一个脚印，一个大的目标的达成不是一下子就能达成的，需要慢慢积累；</p><p>第二个就是对怎么做好一个产品刷新了我的认识，以前我太过于盲目，自己的需求并不是大众的需求，做好一个产品是要找准大众的一个需求才行，更不能没想清楚就开始写代码实现，一个产品的实际需求可能需要结合产品的实际情况来分析，马斯洛金字塔需求最底下是生理需求，比如吃喝拉撒睡，中间是安全需求，最顶层是自我价值的实现与超越，你的产品需要根据实际场景来具体分析，不能你想是什么就是什么。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“青春无罪”是我QQ群（518914410）的一个网友，是我第一个线下交流的网友，是北工大仪器测量专业方向的博士生，为人非常爽朗，乐于助人。今天跟他见面非常开心，跟他学习了很多，主要有两点要说的：&lt;/p&gt;
&lt;p&gt;第一就是不要着急，做好当下需要做的事情，一步一个脚印，一个大的
      
    
    </summary>
    
    
      <category term="面基" scheme="http://www.cmlanche.com/tags/%E9%9D%A2%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>制作ghost主题</title>
    <link href="http://www.cmlanche.com/2018/08/26/%E5%88%B6%E4%BD%9Cghost%E4%B8%BB%E9%A2%98/"/>
    <id>http://www.cmlanche.com/2018/08/26/制作ghost主题/</id>
    <published>2018-08-26T05:16:04.000Z</published>
    <updated>2019-02-26T06:40:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以开发模式启动ghost"><a href="#以开发模式启动ghost" class="headerlink" title="以开发模式启动ghost"></a>以开发模式启动ghost</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd yourghostpath</span><br><span class="line">ghost start --development</span><br><span class="line"><span class="meta">#</span> 如果你已经启动了ghost，但不是开发模式，你可以用ghost stop来结束ghost</span><br></pre></td></tr></table></figure><h3 id="建立主题目录"><a href="#建立主题目录" class="headerlink" title="建立主题目录"></a>建立主题目录</h3><p>首先主题的开发环境是nodejs，所以要我们要先用nodejs构建一个项目，比如我们的项目是example:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd yourghostpath/content/themes</span><br><span class="line">mkdir example</span><br><span class="line">cd example</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>按照提示建立好基本的package.json，ghost主题最少的要求是有2个文件：index.hbs和post.hbs，这里hbs文件是<a href="https://themes.ghost.org/docs/handlebars" target="_blank" rel="noopener">handlerbars</a>文件，它是一个模板引擎，而ghost只支持用handlerbars，所以掌握handlerbars很重要，其实也不难，关键是要了解怎么传递值的。<br>目录和文件建立好了，主题就算完成了，虽然一句代码都没有，但他确实能够正常运转！</p><a id="more"></a><h3 id="激活主题"><a href="#激活主题" class="headerlink" title="激活主题"></a>激活主题</h3><p>打开你的网站后台<code>http://localhost:2368/ghost</code>，在<code>Design</code>-<code>Themes</code>中可以看到你的主题example，然后点击<code>active</code>激活，此时会弹出一个警告框，不管它，主题已经可以正常使用了，只是它是个空的，打开<code>http://localhost:2368</code>验证一下</p><p>###热加载</p><p>它的目的是可以实时加载刷新页面，你需要安装<a href="https://docs.ghost.org/docs/install-local#section-developing-themes" target="_blank" rel="noopener">nodemon</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 需要先停止ghost</span><br><span class="line">ghost stop</span><br><span class="line"><span class="meta">#</span> 安装nodemon</span><br><span class="line">npm install -g nodemon@latest</span><br><span class="line"><span class="meta">#</span> 切换到你的主题目录下</span><br><span class="line">cd yourthemedevpath</span><br><span class="line"><span class="meta">#</span> 热加载</span><br><span class="line">nodemon index.js --watch ./ --ext hbs,js,css</span><br></pre></td></tr></table></figure><p>这是制作主题的基本套路，完成这些后就需要编写主题的代码了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;以开发模式启动ghost&quot;&gt;&lt;a href=&quot;#以开发模式启动ghost&quot; class=&quot;headerlink&quot; title=&quot;以开发模式启动ghost&quot;&gt;&lt;/a&gt;以开发模式启动ghost&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd yourghostpath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ghost start --development&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 如果你已经启动了ghost，但不是开发模式，你可以用ghost stop来结束ghost&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;建立主题目录&quot;&gt;&lt;a href=&quot;#建立主题目录&quot; class=&quot;headerlink&quot; title=&quot;建立主题目录&quot;&gt;&lt;/a&gt;建立主题目录&lt;/h3&gt;&lt;p&gt;首先主题的开发环境是nodejs，所以要我们要先用nodejs构建一个项目，比如我们的项目是example:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd yourghostpath/content/themes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照提示建立好基本的package.json，ghost主题最少的要求是有2个文件：index.hbs和post.hbs，这里hbs文件是&lt;a href=&quot;https://themes.ghost.org/docs/handlebars&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;handlerbars&lt;/a&gt;文件，它是一个模板引擎，而ghost只支持用handlerbars，所以掌握handlerbars很重要，其实也不难，关键是要了解怎么传递值的。&lt;br&gt;目录和文件建立好了，主题就算完成了，虽然一句代码都没有，但他确实能够正常运转！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ghost" scheme="http://www.cmlanche.com/tags/ghost/"/>
    
      <category term="ghost主题" scheme="http://www.cmlanche.com/tags/ghost%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>工作无非是温水煮青蛙</title>
    <link href="http://www.cmlanche.com/2018/08/24/%E6%B8%A9%E6%B0%B4%E7%85%AE%E9%9D%92%E8%9B%99/"/>
    <id>http://www.cmlanche.com/2018/08/24/温水煮青蛙/</id>
    <published>2018-08-24T08:50:25.000Z</published>
    <updated>2018-08-24T08:57:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>在别人公司上班工作是下策，看似光鲜亮丽的生活，其实是温水煮青蛙，当某一天公司倒闭，或个人技术跟不上、在公司各种不服等等因素，不知道你有没有感受到面临淘汰的危机感。我时常有这样的感觉，不是非得自己给自己打工，而是你需要有不受制于人的技术、财富。你就必须要勤奋努力，抓紧时间做出一个有价值的优秀赚钱来源。加油！</p><p>————————————————————————————————————————————致己书</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在别人公司上班工作是下策，看似光鲜亮丽的生活，其实是温水煮青蛙，当某一天公司倒闭，或个人技术跟不上、在公司各种不服等等因素，不知道你有没有感受到面临淘汰的危机感。我时常有这样的感觉，不是非得自己给自己打工，而是你需要有不受制于人的技术、财富。你就必须要勤奋努力，抓紧时间做出
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>令人绝望的UIAutomator WebView自动化测试</title>
    <link href="http://www.cmlanche.com/2018/08/17/%E4%BB%A4%E4%BA%BA%E7%BB%9D%E6%9C%9B%E7%9A%84UIAutomator-WebView%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://www.cmlanche.com/2018/08/17/令人绝望的UIAutomator-WebView自动化测试/</id>
    <published>2018-08-17T11:02:00.000Z</published>
    <updated>2018-08-19T13:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>特别特别想吐槽Android UIAutomator对WebView的控件树渲染，谷歌简直就写了一坨屎，又乱又臭</p></blockquote><h3 id="为什么要吐槽？"><a href="#为什么要吐槽？" class="headerlink" title="为什么要吐槽？"></a>为什么要吐槽？</h3><p>需求是这样的，我们<strong>期望通过UIAutomator对WebView来dump结构一致的控件树结构，以便在使用XPath定位的时候能够精准查询每个控件</strong>。然而实际情况是：</p><h4 id="1-可以与不可以的问题"><a href="#1-可以与不可以的问题" class="headerlink" title="1. 可以与不可以的问题"></a>1. 可以与不可以的问题</h4><p>UIAutomator在某些Android版本（好像是4.4.4以下不支持）上无法dump，只有一个android.webkit.WebView节点。</p><h4 id="2-就算可以dump，结构和内容也极度不统一"><a href="#2-就算可以dump，结构和内容也极度不统一" class="headerlink" title="2. 就算可以dump，结构和内容也极度不统一"></a>2. 就算可以dump，结构和内容也极度不统一</h4><p>UIAutomator就算能很好的dump应用中WebView的元素，但是结构也非常不统一，结构混乱。</p><p>目前我碰到的情况有：</p><h5 id="1-识别能力不一致"><a href="#1-识别能力不一致" class="headerlink" title="1. 识别能力不一致"></a>1. 识别能力不一致</h5><p>android 8.0会正确识别应用中的图片，把它标记为<code>android.widget.Image</code>，而在7.1等上却不能，只能识别成<code>android.view.View</code></p><h5 id="2-识别出的结构不一致"><a href="#2-识别出的结构不一致" class="headerlink" title="2.识别出的结构不一致"></a>2.识别出的结构不一致</h5><p>有些可能会多增加一些<code>android.view.View</code>的包装视图，可能不仅仅是一层包装</p><h5 id="3-识别出的内容也不一样"><a href="#3-识别出的内容也不一样" class="headerlink" title="3. 识别出的内容也不一样"></a>3. 识别出的内容也不一样</h5><p>通常在高版本手机，比如8.0+上能把一些图片识别出带文本的View，低版本却不能</p><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>就算你内容识别出文本了，View能正确识别为Image了，我都不怪你，我都可以做转化，比如我忽略问题，Image我都统一转化为View，但是结构不一致那就问题太大了，XPAth查找完全失效！在WebView中你无法利用其它条件来定位一个控件，能定位控件的文本、ID、class在WebView中都是不稳定因素。</p><h3 id="寻找思路解决这个问题"><a href="#寻找思路解决这个问题" class="headerlink" title="寻找思路解决这个问题"></a>寻找思路解决这个问题</h3><h4 id="1-将WebView设置为可调试模式，远程调试它"><a href="#1-将WebView设置为可调试模式，远程调试它" class="headerlink" title="1. 将WebView设置为可调试模式，远程调试它"></a>1. 将WebView设置为可调试模式，远程调试它</h4><p>本方案的目的就是要能够向WebView注入JavaScript代码，然后输出我们自己的一个查询结果，因为我们面对的是一个固定的网页html，所以它是兼容性很好的方式。</p><p>实现方式就是调用WebView的静态方法<code>WebView.setWebContentsDebuggingEnabled(true)</code>，然后打开chrome://inspect调试当前WebView页面，但是很明显无效，设置调试模式仅仅对当前应用有效，对其他应用不产生任何效果，不然WebView就没啥安全性可言了。</p><p>网上说（<a href="https://blog.csdn.net/zhulin2609/article/details/51437821）可以用root权限强制开启，但是我们的场景是面对成千上万的没root权限手机，去root显然不现实，本方案放弃" target="_blank" rel="noopener">https://blog.csdn.net/zhulin2609/article/details/51437821）可以用root权限强制开启，但是我们的场景是面对成千上万的没root权限手机，去root显然不现实，本方案放弃</a></p><h4 id="2-利用VisualXposed来架设一个类似虚拟机的东西，用这个虚拟机来启动被测应用"><a href="#2-利用VisualXposed来架设一个类似虚拟机的东西，用这个虚拟机来启动被测应用" class="headerlink" title="2. 利用VisualXposed来架设一个类似虚拟机的东西，用这个虚拟机来启动被测应用"></a>2. 利用VisualXposed来架设一个类似虚拟机的东西，用这个虚拟机来启动被测应用</h4><p>开源地址：<a href="https://github.com/android-hacker/VirtualXposed" target="_blank" rel="noopener">https://github.com/android-hacker/VirtualXposed</a></p><p>这个方案你需要掌握VisualApp和epic项目，它可以实现对被测应用的完全掌控，也不需要root权限，但是它过于复杂，不稳定性因素太多，兼容性有待验证，本方案可行，但对暂时Testin云测是不适用，留作待定研究吧。</p><h4 id="3-利用UIAutomator渲染的不稳定坑逼的WebView的AccessbilityNodeInfo来重新构造我们自己的控件树结构"><a href="#3-利用UIAutomator渲染的不稳定坑逼的WebView的AccessbilityNodeInfo来重新构造我们自己的控件树结构" class="headerlink" title="3. 利用UIAutomator渲染的不稳定坑逼的WebView的AccessbilityNodeInfo来重新构造我们自己的控件树结构"></a>3. 利用UIAutomator渲染的不稳定坑逼的WebView的AccessbilityNodeInfo来重新构造我们自己的控件树结构</h4><p>这种方案来源于我对界面控件元素区域的思考，虽然UIAutomator给的控件树不靠谱，但是界面上的信息它都有（如果能dump的话），如果我们按照控件的区域重新组织这个WebView的结构的话，是否可行？</p><p>比如A区域在B区域的里面，那么我们认定A是B的子节点，如果A和B没有父子关系，他们处于同一Y坐标，那么他们可以认为是兄弟节点，如果他们的区域是一致的，那么他们其中之一是可以被忽略的，至于忽略谁，就要看谁附带的信息更有价值，比如A的带有文本或class是Image，显然A就更有价值，忽略B。</p><p>按照上面的大致逻辑，我们可以构造一个自己的控件树，这样是否可以提高兼容性？</p><p>实际上我做了测试，用云测Testin的700+个手机做了验证，在未使用本方案之前，通过了98台设备，使用本方案我测试了两次，第一次通过223，第二次是194次，提高了一倍</p><p><strong>使用本方案之前</strong></p><p><img src="http://pc3aukg6f.bkt.clouddn.com/blog/uy4uz.png" alt="image-20180817194907798"></p><p><strong>使用本方案之后</strong></p><p><img src="http://pc3aukg6f.bkt.clouddn.com/blog/i45u5.png" alt="image-20180817194831153"></p><p><img src="http://pc3aukg6f.bkt.clouddn.com/blog/6608f.png" alt="image-20180817194933148"></p><p>有一些效果，但是还不够o(╥﹏╥)o</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener"><img src="http://pc3aukg6f.bkt.clouddn.com/blog/i45u5.png" alt></a></p><h3 id="最后我想问"><a href="#最后我想问" class="headerlink" title="最后我想问"></a>最后我想问</h3><ol><li>谷歌的UIAutomator2.0测试框架在WebView上测试是很坑爹的，也是特别难解的，为什么不能让我们自定义渲染逻辑呢？</li><li>有哪位同学有更好的方式？能够兼容上千款不同的设备不同的版本？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;特别特别想吐槽Android UIAutomator对WebView的控件树渲染，谷歌简直就写了一坨屎，又乱又臭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么要吐槽？&quot;&gt;&lt;a href=&quot;#为什么要吐槽？&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="UIAutomator吐槽" scheme="http://www.cmlanche.com/tags/UIAutomator%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Android自动化·细数UIAutomator的坑·UIAutomator渲染WebView控件树在不同手机上的差异</title>
    <link href="http://www.cmlanche.com/2018/08/13/Android%E8%87%AA%E5%8A%A8%E5%8C%96%C2%B7%E7%BB%86%E6%95%B0UIAutomator%E7%9A%84%E5%9D%91%C2%B7%E6%8E%A7%E4%BB%B6%E6%A0%91%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%89%8B%E6%9C%BA%E4%B8%8A%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    <id>http://www.cmlanche.com/2018/08/13/Android自动化·细数UIAutomator的坑·控件树在不同手机上的差异/</id>
    <published>2018-08-13T10:50:31.000Z</published>
    <updated>2018-08-13T11:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>我想只有<a href="https://testin.cn" target="_blank" rel="noopener">Testin云测</a>才会遇到这样的问题，云测的自动化技术是要抹掉手机的差异性的，就是说一套脚本可以在不同的手机产商不同的手机版本上成功运行，而云测会遇到很多很多各种各样因为手机产商与版本的差异导致脚本不兼容的问题，而今天我讲的是最近发现的UIAutomator在WebView控件树渲染在不同手机上的差异。</p><p>Testin云测已跨越自动化测试的万水千山，欢迎来测！</p><a id="more"></a><h3 id="额外话"><a href="#额外话" class="headerlink" title="额外话"></a>额外话</h3><p>对WebView来说，UIAutomator的能力是很有限的，更别提小程序使用的腾讯X5内核的Webview，以及国外流行的Crosswalk，他们俩UIAutomator是根本无法识别的，但是云测对小程序有独特的支持。下回我会分析UIAutomator为啥无法很好识别WebView。</p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>中国手机产商太多了，而且Android版本分布也特别凌乱，从4.3到8.0都有，而它对WebView的渲染能力也各有不同，经过我分析云测700个手机在同一WebView页面的执行结果，我发现有的控件树可能是这样的:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">class</span>=<span class="string">"android.webkit.WebView"</span> <span class="attr">bounds</span>=<span class="string">"[0,0,100,100]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">class</span>=<span class="string">"android.view.View"</span> <span class="attr">bounds</span>=<span class="string">"[0,0,20,20]"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">class</span>=<span class="string">"android.view.TextView"</span> <span class="attr">bounds</span>=<span class="string">"[0,0,20,20]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而有的是这样的</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">class</span>=<span class="string">"android.webkit.WebView"</span> <span class="attr">bounds</span>=<span class="string">"[0,0,100,100]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">class</span>=<span class="string">"android.view.TextView"</span> <span class="attr">bounds</span>=<span class="string">"[0,0,20,20]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们发现TextView外层居然有一层皮，而有的居然没有，这是不一致的，这样会导致后续依赖控件树结构的xpath查询会失败，怎么抹掉这种差异性呢？问题我已道出，怎么解我也有办法，但是涉及到公司机密，我也只能点到为止。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想只有&lt;a href=&quot;https://testin.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Testin云测&lt;/a&gt;才会遇到这样的问题，云测的自动化技术是要抹掉手机的差异性的，就是说一套脚本可以在不同的手机产商不同的手机版本上成功运行，而云测会遇到很多很多各种各样因为手机产商与版本的差异导致脚本不兼容的问题，而今天我讲的是最近发现的UIAutomator在WebView控件树渲染在不同手机上的差异。&lt;/p&gt;
&lt;p&gt;Testin云测已跨越自动化测试的万水千山，欢迎来测！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android自动化" scheme="http://www.cmlanche.com/tags/Android%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="细数UIAutomator的坑" scheme="http://www.cmlanche.com/tags/%E7%BB%86%E6%95%B0UIAutomator%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>android自动化研发日志 - 细数UIAutomator缺点 - 1.0和2.0的区别</title>
    <link href="http://www.cmlanche.com/2018/08/13/android%E8%87%AA%E5%8A%A8%E5%8C%96%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97---%E7%BB%86%E6%95%B0UIAutomator%E7%BC%BA%E7%82%B9---%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E7%9A%84%E5%90%90%E6%A7%BD/"/>
    <id>http://www.cmlanche.com/2018/08/13/android自动化研发日志---细数UIAutomator缺点---关于版本的吐槽/</id>
    <published>2018-08-13T09:18:06.000Z</published>
    <updated>2018-08-13T10:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi，我是云测自动化研发工程师，关于我可以看这个链接：一只误入歧途的资深自动化研发（待写）</p><p>系列文章：细数UIAutomator缺点(待写)</p><p>专题：android自动化测试（待写）</p><p>关于云测的自动化测试技术：我不说你肯定不知道原来Testin云测自动化技术在某种程度上讲已经超越了谷歌（待写）</p><hr><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>本文讨论的是关于UIAutomator版本的吐槽，我们都知道UIAutomator分为两个版本，1.0和2.0</p><p>如下是两者的对比</p><table><thead><tr><th></th><th>1.0</th><th>2.0</th></tr></thead><tbody><tr><td>最低Android版本分界线</td><td>大于或等于16</td><td>大于或等于18</td></tr><tr><td>运行包形式</td><td>jar</td><td>apk</td></tr><tr><td>权限</td><td>shell级别</td><td>自身apk权限赋予</td></tr></tbody></table><h3 id="UIAutomator1-0"><a href="#UIAutomator1-0" class="headerlink" title="UIAutomator1.0"></a>UIAutomator1.0</h3><p>官网已经没有1.0的链接了，只有2.0的，我在其他地方找到老学习链接：<a href="https://stuff.mit.edu/afs/sipb/project/android/docs/tools/help/uiautomator/index.html" target="_blank" rel="noopener">https://stuff.mit.edu/afs/sipb/project/android/docs/tools/help/uiautomator/index.html</a></p><p>UIAutomator的运行包是一个jar包，运行命令大致如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> yourtest.jar是你的jar在android系统的具体文件路径，通常放在/data/local/tmp/目录下</span><br><span class="line"><span class="meta">#</span> yourjarclass是你要执行的测试方法，例如com.test.YourTestClass#functionname</span><br><span class="line">adb shell uiautomator runtest yourtest.jar -c yourjarclass#function</span><br></pre></td></tr></table></figure><p>运行起来后，我们用命令查看UIAutomator1.0的进程是shell的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdembp:Downloads cmlanche$ adb shell ps | grep uia</span><br><span class="line">shell     4101  4098  2048608 61680 futex_wait 7f81656170 S uiautomator</span><br><span class="line">chengmingdembp:Downloads cmlanche$</span><br></pre></td></tr></table></figure><p>所以它的权限是比较高的，启动之后便可以执行，也不需要安装，虽然它在这方面很便利，但它的获取控件信息的能力很鸡肋，只能获取到一个AccessibilityNodeInfo的root节点，而实际上，多root的情况是普遍存在的，尤其是5.0以后的android版本。</p><p>虽然它很鸡肋，但是它可以用来做安装UIAutomator2.0之前的操作，UIAutomator2.0需要自动安装，那么1.0的话就必须安装了，用它来自动点击UIAutomator2.0的安装对话框，在2.0启动之前的所有安装与权限框处理过程，都可以用1.0来做。</p><h3 id="UIAutomator2-0"><a href="#UIAutomator2-0" class="headerlink" title="UIAutomator2.0"></a>UIAutomator2.0</h3><p>2.0是一个安装包的形式来做测试的，它拥有什么权限需要你自己去设定，谷歌现在官方只支持2.0，就说明谷歌对它有足够的重视。</p><p>官网：<a href="https://developer.android.com/training/testing/ui-automator" target="_blank" rel="noopener">https://developer.android.com/training/testing/ui-automator</a></p><p>更好上网请用：<a href="https://www.expressrefer.com/refer-friend?referrer_id=13813836&amp;utm_campaign=referrals&amp;utm_medium=copy_link&amp;utm_source=referral_dashboard" target="_blank" rel="noopener">expressvpn</a></p><p>2.0加入了Instrument支持，它的执行命令类似这样的：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 详情请到官网学习</span><br><span class="line">adb shell am instrument -w -r -e debug false -e class ....</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi，我是云测自动化研发工程师，关于我可以看这个链接：一只误入歧途的资深自动化研发（待写）&lt;/p&gt;
&lt;p&gt;系列文章：细数UIAutomator缺点(待写)&lt;/p&gt;
&lt;p&gt;专题：android自动化测试（待写）&lt;/p&gt;
&lt;p&gt;关于云测的自动化测试技术：我不说你肯定不知道原来T
      
    
    </summary>
    
    
      <category term="android自动化测试" scheme="http://www.cmlanche.com/tags/android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="细数UIAutomator缺点" scheme="http://www.cmlanche.com/tags/%E7%BB%86%E6%95%B0UIAutomator%E7%BC%BA%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>你真的了解java的lambda吗？- java lambda用法与源码分析</title>
    <link href="http://www.cmlanche.com/2018/07/22/lambda%E7%94%A8%E6%B3%95%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.cmlanche.com/2018/07/22/lambda用法与源码分析/</id>
    <published>2018-07-22T01:44:12.000Z</published>
    <updated>2018-07-23T08:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h3 id="示例：最普遍的一个例子，执行一个线程"><a href="#示例：最普遍的一个例子，执行一个线程" class="headerlink" title="示例：最普遍的一个例子，执行一个线程"></a>示例：最普遍的一个例子，执行一个线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.print(<span class="string">"hello world"</span>)).start();</span><br></pre></td></tr></table></figure><p><code>-&gt;</code>我们发现它指向的是<code>Runnable</code>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p><code>-&gt;</code>这个箭头是lambda表达式的关键操作符</p></li><li><p><code>-&gt;</code>把表达式分成两截，前面是函数参数，后面是函数体。</p></li><li><p>Thread的构造函数接收的是一个Runnable接口对象，而我们这里的用法相当于是把一个函数当做接口对象传递进去了，这点理解很关键，这正是函数式编程的含义所在。</p></li><li><p>我们注意到Runnable有个注解<code>@FunctionalInterface</code>，它是jdk8才引入，它的含义是函数接口。它是lambda表达式的协议注解，这个注解非常重要，后面做源码分析会专门分析它的官方注释，到时候一目了然。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @jls 4.3.2. The Class Object</span></span><br><span class="line"><span class="comment"> * @jls 9.8 Functional Interfaces</span></span><br><span class="line"><span class="comment"> * @jls 9.4.3 Interface Method Body</span></span><br><span class="line"><span class="comment"> * @since 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FunctionalInterface &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="由此引发的一些案例"><a href="#由此引发的一些案例" class="headerlink" title="由此引发的一些案例"></a>由此引发的一些案例</h3><h4 id="有参数有返回值的实例：集合排序"><a href="#有参数有返回值的实例：集合排序" class="headerlink" title="有参数有返回值的实例：集合排序"></a>有参数有返回值的实例：集合排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Collections.sort(list, (o1, o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(o1.equals(o2)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们知道Collections.sort方法的第二个参数接受的是一个<code>Comparator&lt;T&gt;</code>的对象，它的部分关键源码是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上已经去掉注释和部分其他方法。</p><p>我们可以看到sort的第二个参数是Comparator的compare方法，参数类型是T，分别是o1和o2，返回值是一个int。</p><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><ol><li><p>上面的示例我们看到接口都有个<code>@FunctionalInterface</code>的注解，但是我们在实际编程中并没有加这个注解也可以实现lambda表达式，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ITest</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(String string)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(ITest test)</span> </span>&#123;</span><br><span class="line">        test.test(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Print(string -&gt; &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，确实不需要增加<code>@FunctionInterface</code>注解就可以实现</p></li><li><p>如果在1中的示例的ITest接口中增加另外一个接口方法，我们会发现不能再用lambda表达式。</p></li></ol><p>我们带着这两个疑问来进入源码解析。</p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h3 id="必须了解注解-FunctionInterface"><a href="#必须了解注解-FunctionInterface" class="headerlink" title="必须了解注解 @FunctionInterface"></a>必须了解注解 <code>@FunctionInterface</code></h3><p>上源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An informative annotation type used to indicate that an interface</span></span><br><span class="line"><span class="comment"> * type declaration is intended to be a &lt;i&gt;functional interface&lt;/i&gt; as</span></span><br><span class="line"><span class="comment"> * defined by the Java Language Specification.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Conceptually, a functional interface has exactly one abstract</span></span><br><span class="line"><span class="comment"> * method.  Since &#123;<span class="doctag">@linkplain</span> java.lang.reflect.Method#isDefault()</span></span><br><span class="line"><span class="comment"> * default methods&#125; have an implementation, they are not abstract.  If</span></span><br><span class="line"><span class="comment"> * an interface declares an abstract method overriding one of the</span></span><br><span class="line"><span class="comment"> * public methods of &#123;<span class="doctag">@code</span> java.lang.Object&#125;, that also does</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;not&lt;/em&gt; count toward the interface's abstract method count</span></span><br><span class="line"><span class="comment"> * since any implementation of the interface will have an</span></span><br><span class="line"><span class="comment"> * implementation from &#123;<span class="doctag">@code</span> java.lang.Object&#125; or elsewhere.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that instances of functional interfaces can be created with</span></span><br><span class="line"><span class="comment"> * lambda expressions, method references, or constructor references.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If a type is annotated with this annotation type, compilers are</span></span><br><span class="line"><span class="comment"> * required to generate an error message unless:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; The type is an interface type and not an annotation type, enum, or class.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; The annotated type satisfies the requirements of a functional interface.</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;However, the compiler will treat any interface meeting the</span></span><br><span class="line"><span class="comment"> * definition of a functional interface as a functional interface</span></span><br><span class="line"><span class="comment"> * regardless of whether or not a &#123;<span class="doctag">@code</span> FunctionalInterface&#125;</span></span><br><span class="line"><span class="comment"> * annotation is present on the interface declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.3.2. The Class Object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.8 Functional Interfaces</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.4.3 Interface Method Body</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FunctionalInterface &#123;&#125;</span><br></pre></td></tr></table></figure><p>我们说过这个注解用来规范lambda表达式的使用协议的，那么注释中都说了哪些呢？</p><ol><li><p><strong>一种给interface做注解的注解类型，被定义成java语言规范</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* An informative annotation type used to indicate that an <span class="class"><span class="keyword">interface</span></span></span><br><span class="line"><span class="class">* <span class="title">type</span> <span class="title">declaration</span> <span class="title">is</span> <span class="title">intended</span> <span class="title">to</span> <span class="title">be</span> <span class="title">a</span> &lt;<span class="title">i</span>&gt;<span class="title">functional</span> <span class="title">interface</span>&lt;/<span class="title">i</span>&gt; <span class="title">as</span></span></span><br><span class="line"><span class="class">* <span class="title">defined</span> <span class="title">by</span> <span class="title">the</span> <span class="title">Java</span> <span class="title">Language</span> <span class="title">Specification</span>.</span></span><br></pre></td></tr></table></figure></li><li><p><strong>一个被它注解的接口只能有一个抽象方法</strong>，有两种例外。</p><ol><li>第一是接口允许有实现的方法，这种实现的方法是用default关键字来标记的（java反射中java.lang.reflect.Method#isDefault()方法用来判断是否是default方法），例如：</li></ol><p><img src="http://pc3aukg6f.bkt.clouddn.com/blog/ou8mh.png" alt="image-20180722102331347"></p><p>​    当然这是jdk8才引入的特性，到此我们才知道，<strong>知识是一直在变化的，我们在学校中学到interface接口不允许有实现的方法是错误的，随着时间推移，一切规范都有可能发生变化</strong>。</p><ol start="2"><li><p>如果声明的方法和java.lang.Object中的某个方法一样，它可以不当做未实现的方法，不违背这个原则：<strong>一个被它注解的接口只能有一个抽象方法</strong></p><p>例如同样是Compartor接口中，它重新声明了equals方法：</p><p><img src="http://pc3aukg6f.bkt.clouddn.com/blog/1lait.png" alt="image-20180722102904828"></p></li></ol><p>这些是对如下注释的翻译和解释</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* Conceptually, a functional <span class="class"><span class="keyword">interface</span> <span class="title">has</span> <span class="title">exactly</span> <span class="title">one</span> <span class="title">abstract</span></span></span><br><span class="line">* method.  Since &#123;@linkplain java.lang.reflect.Method#isDefault()</span><br><span class="line">* <span class="keyword">default</span> methods&#125; have an implementation, they are not <span class="keyword">abstract</span>.  If</span><br><span class="line">* an <span class="class"><span class="keyword">interface</span> <span class="title">declares</span> <span class="title">an</span> <span class="title">abstract</span> <span class="title">method</span> <span class="title">overriding</span> <span class="title">one</span> <span class="title">of</span> <span class="title">the</span></span></span><br><span class="line"><span class="class">* <span class="title">public</span> <span class="title">methods</span> <span class="title">of</span> </span>&#123;<span class="meta">@code</span> java.lang.Object&#125;, that also does</span><br><span class="line">* &lt;em&gt;not&lt;/em&gt; count toward the interface's abstract method count</span><br><span class="line">* since any implementation of the <span class="class"><span class="keyword">interface</span> <span class="title">will</span> <span class="title">have</span> <span class="title">an</span></span></span><br><span class="line"><span class="class">* <span class="title">implementation</span> <span class="title">from</span> </span>&#123;<span class="meta">@code</span> java.lang.Object&#125; or elsewhere.</span><br></pre></td></tr></table></figure></li><li><p><strong>如果一个类型被这个注解修饰，那么编译器会要求这个类型必须满足如下条件</strong></p><ol><li>这个类型必须是一个interface，而不是其他的注解类型、枚举enum或者类class</li><li>这个类型必须满足function interface的所有要求，如你个包含两个抽象方法的接口增加这个注解，会有编译错误。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* &lt;p&gt;If a type is annotated with <span class="keyword">this</span> annotation type, compilers are</span><br><span class="line">* required to generate an error message unless:</span><br><span class="line">*</span><br><span class="line">* &lt;ul&gt;</span><br><span class="line">* &lt;li&gt; The type is an <span class="class"><span class="keyword">interface</span> <span class="title">type</span> <span class="title">and</span> <span class="title">not</span> <span class="title">an</span> <span class="title">annotation</span> <span class="title">type</span>, <span class="title">enum</span>, <span class="title">or</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">* &lt;<span class="title">li</span>&gt; <span class="title">The</span> <span class="title">annotated</span> <span class="title">type</span> <span class="title">satisfies</span> <span class="title">the</span> <span class="title">requirements</span> <span class="title">of</span> <span class="title">a</span> <span class="title">functional</span> <span class="title">interface</span>.</span></span><br><span class="line"><span class="class">* &lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编译器会自动把满足function interface要求的接口自动识别为function interface，所以你才不需要对上面示例中的<code>ITest</code>接口增加@FunctionInterface注解。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* &lt;p&gt;However, the compiler will treat any <span class="class"><span class="keyword">interface</span> <span class="title">meeting</span> <span class="title">the</span></span></span><br><span class="line"><span class="class">* <span class="title">definition</span> <span class="title">of</span> <span class="title">a</span> <span class="title">functional</span> <span class="title">interface</span> <span class="title">as</span> <span class="title">a</span> <span class="title">functional</span> <span class="title">interface</span></span></span><br><span class="line"><span class="class">* <span class="title">regardless</span> <span class="title">of</span> <span class="title">whether</span> <span class="title">or</span> <span class="title">not</span> <span class="title">a</span> </span>&#123;<span class="meta">@code</span> FunctionalInterface&#125;</span><br><span class="line">* annotation is present on the <span class="class"><span class="keyword">interface</span> <span class="title">declaration</span>.</span></span><br></pre></td></tr></table></figure></li></ol><p>通过了解function interface我们能够知道怎么才能正确的创建一个function interface来做lambda表达式了。接下来的是了解java是怎么把一个函数当做一个对象作为参数使用的。</p><h3 id="穿越：对象变身函数"><a href="#穿越：对象变身函数" class="headerlink" title="穿越：对象变身函数"></a>穿越：对象变身函数</h3><p>让我们重新复盘一下上面最开始的实例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.print(<span class="string">"hello world"</span>)).start();</span><br></pre></td></tr></table></figure><p>我们知道在jdk8以前我们都是这样来执行的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">System.out.print(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(r).start();</span><br></pre></td></tr></table></figure><p>我们知道两者是等价的，也就是说<code>r</code> 等价于<code>()-&gt;System.out.print(&quot;hello world&quot;)</code>，一个接口对象等于一个lambda表达式？那么lambda表达式肯定做了这些事情（未看任何资料，纯粹推理，有误再改正）：</p><ol><li>创建接口对象</li><li>实现接口对象</li><li>返回接口对象</li></ol><h3 id="关于UnaryOperator"><a href="#关于UnaryOperator" class="headerlink" title="关于UnaryOperator"></a>关于<code>UnaryOperator</code></h3><p>上篇文章（<a href="https://www.cmlanche.com/2018/07/21/%E8%81%8A%E4%B8%80%E8%81%8AJavaFx%E4%B8%AD%E7%9A%84TextFormater/">聊一聊JavaFx中的TextFormatter以及一元操作符UnaryOperator</a>）关于<code>UnaryOperator</code>草草收尾，在这里给大家重新梳理一下，关于它的使用场景以及它与lambda表达式的关系</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>要先理解它的作用，它是接受一个参数并返回与该类型同的值，来看一个List怎么用它的，java.util.List中的replaceAll就用它了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(operator);</span><br><span class="line">    <span class="keyword">final</span> ListIterator&lt;E&gt; li = <span class="keyword">this</span>.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (li.hasNext()) &#123;</span><br><span class="line">        li.set(operator.apply(li.next()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到这个方法的目的是把list中的值经过operator操作后重新返回一个新值，例如具体调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"abc"</span>);</span><br><span class="line">list.replaceAll(s -&gt; s + <span class="string">"efg"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>其中lambda表达式<code>s-&gt;s+&quot;efg&quot;</code>就是这个operator对象，那么最终list中的值就变成了[“abcefg”]，由此我们可以知道它的作用就是<strong>对输入的值再加工，并返回同类型的值</strong>，怎么用就需要你自己扩展发挥了。</p><h5 id="与lambda表达式的关系？"><a href="#与lambda表达式的关系？" class="headerlink" title="与lambda表达式的关系？"></a>与lambda表达式的关系？</h5><p>在我看来，它跟lambda表达式的关系并不大，只是它是jdk内置的一种标准操作，类似的二元操作符<code>BinaryOperator</code>它可以接受两个同类型参数，并返回同类型参数的值。</p><h3 id="关于UnaryOperator，我们百尺竿头更进一步，深入到核心"><a href="#关于UnaryOperator，我们百尺竿头更进一步，深入到核心" class="headerlink" title="关于UnaryOperator，我们百尺竿头更进一步，深入到核心"></a>关于UnaryOperator，我们百尺竿头更进一步，深入到核心</h3><p>先贴出它的源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UnaryOperator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a unary operator that always returns its input argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input and output of the operator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a unary operator that always returns its input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">UnaryOperator&lt;T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到这个function interface居然没有抽象方法，不，不是没有，我们继续看Function接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function to its input, and then applies this function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of input to the &#123;<span class="doctag">@code</span> before&#125; function, and to the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> before the function to apply before this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function and then applies this function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if before is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #andThen(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies this function to</span></span><br><span class="line"><span class="comment">     * its input, and then applies the &#123;<span class="doctag">@code</span> after&#125; function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of output of the &#123;<span class="doctag">@code</span> after&#125; function, and of the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the function to apply after this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies this function and then</span></span><br><span class="line"><span class="comment">     * applies the &#123;<span class="doctag">@code</span> after&#125; function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if after is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #compose(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a function that always returns its input argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input and output objects to the function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a function that always returns its input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然他们都被注解为<code>@FunctionInterface</code>了，那么他们肯定有一个唯一的抽象方法，那就是<code>apply</code></p><p>我们知道<code>-&gt;</code>lambda表达式它是不需要关心函数名字的，所以不管它叫什么，<code>apply</code>也好，<code>apply1</code>也好都可以，但jdk肯定要叫一个更加合理的名字，那么我们知道<code>s -&gt; s + &quot;efg&quot;</code>中<code>-&gt;</code>调用的就是<code>apply</code>方法</p><p>而且我们注意到这里有一个<code>identity()</code>的静态方法，它返回一个Function对象，它其实跟lambda表达式关系也不大，它的作用是返回当前function所要表达的lambda含义。相当于创建了一个自身对象。</p><p>Function算是lambda的一种扩展应用，这个Function的的作用是<code>Represents a function that accepts one argument and produces a result.</code>意思是接受一个参数，并产生（返回）一个结果（类型可不同）。</p><p>类似的还有很多Function，都在包java.util.Function中</p><p><img src="http://pc3aukg6f.bkt.clouddn.com/blog/ci8vo.png" alt="image-20180722115019213"></p><p>你也可以创建自己的Function，它是用来表达操作是怎样的。如传入的参数是什么，返回的是什么。</p><p>其实你只要明白它<strong>抽象的是操作</strong>就可以了。</p><p>到此就知道，原来UnaryOperator没啥神秘的，jdk把这些操作放在java.util.function中也正说明了它是一个工具类，是为了提取重复代码，让它可以重用，毕竟需要用到这样的操作的地方太多了，提取是有必要的。</p><p>转载请注明来源：<a href="https://www.cmlanche.com">cmlanche.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h1&gt;&lt;h3 id=&quot;示例：最普遍的一个例子，执行一个线程&quot;&gt;&lt;a href=&quot;#示例：最普遍的一个例子，执行一个线程&quot; class=&quot;headerlink&quot; title=&quot;示例：最普遍的一个例子，执行一个线程&quot;&gt;&lt;/a&gt;示例：最普遍的一个例子，执行一个线程&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(() -&amp;gt; System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;我们发现它指向的是&lt;code&gt;Runnable&lt;/code&gt;接口&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * When an object implementing interface &amp;lt;code&amp;gt;Runnable&amp;lt;/code&amp;gt; is used&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * to create a thread, starting the thread causes the object&#39;s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; method to be called in that separately executing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The general contract of the method &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; is that it may&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * take any action whatsoever.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt;     java.lang.Thread#run()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;这个箭头是lambda表达式的关键操作符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;把表达式分成两截，前面是函数参数，后面是函数体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thread的构造函数接收的是一个Runnable接口对象，而我们这里的用法相当于是把一个函数当做接口对象传递进去了，这点理解很关键，这正是函数式编程的含义所在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们注意到Runnable有个注解&lt;code&gt;@FunctionalInterface&lt;/code&gt;，它是jdk8才引入，它的含义是函数接口。它是lambda表达式的协议注解，这个注解非常重要，后面做源码分析会专门分析它的官方注释，到时候一目了然。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* @jls 4.3.2. The Class Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @jls 9.8 Functional Interfaces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @jls 9.4.3 Interface Method Body&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @since 1.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; FunctionalInterface &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.cmlanche.com/tags/java/"/>
    
      <category term="lambda" scheme="http://www.cmlanche.com/tags/lambda/"/>
    
      <category term="UnaryOperator" scheme="http://www.cmlanche.com/tags/UnaryOperator/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊JavaFx中的TextFormatter以及一元操作符UnaryOperator</title>
    <link href="http://www.cmlanche.com/2018/07/21/%E8%81%8A%E4%B8%80%E8%81%8AJavaFx%E4%B8%AD%E7%9A%84TextFormater/"/>
    <id>http://www.cmlanche.com/2018/07/21/聊一聊JavaFx中的TextFormater/</id>
    <published>2018-07-21T07:49:27.000Z</published>
    <updated>2018-07-22T01:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="直击主题：它在JavaFx中可以实现什么效果"><a href="#直击主题：它在JavaFx中可以实现什么效果" class="headerlink" title="直击主题：它在JavaFx中可以实现什么效果"></a>直击主题：它在JavaFx中可以实现什么效果</h3><p>它可以格式化输入文本的内容，可以允许输入哪种值，可以规定光标的位置，例如可以实现一个输入框只允许输入数字，</p><p>例如<code>textfield</code>表示输入框对象，那么设置格式化内容的话就应该像这样子：<code>textfield.setTextformatter(new TextFormatter&lt;String&gt;(IntegerFilter))</code>, 而其中<code>IntegerFilter</code>就是只允许输入数字的过滤器，它的代码是怎样的呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by cmlanche on 2017/7/10.</span></span><br><span class="line"><span class="comment"> * 整数过滤器</span></span><br><span class="line"><span class="comment"> * 应用：比如使一个输入框只能输入数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerFilter</span> <span class="keyword">implements</span> <span class="title">UnaryOperator</span>&lt;<span class="title">TextFormatter</span>.<span class="title">Change</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Pattern DIGIT_PATTERN = Pattern.compile(<span class="string">"\\d*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TextFormatter.<span class="function">Change <span class="title">apply</span><span class="params">(TextFormatter.Change change)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DIGIT_PATTERN.matcher(change.getText()).matches() ? change : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DIGIT_PATTERN大家都能看出来它是正则表达式，是匹配文本是否是整数的表达式。</p><p>apply方法中的实现的意思是，只要符合整数就返回change，否则返回null</p><a id="more"></a><p>经过测试发现，当返回change的时候，可以允许输入，如输入0~9中的任意数字都可以输入，但输入非数字的话，会返回null，此时发现输入框光标不会移动，而且内容也不会变化，说明null是禁用的意思。</p><p>还有个细节就是当按下delete键时，change对象中有个方法叫<code>isDeleted</code>返回true，而文本是空，当按下其他字符，如1时，change中的getText为<code>1</code>，change还有个getControl和getControlText可以返回控件和控件的文本。说明change是包含了当前变化的内容和不变的内容。</p><p>那么这个TextFormatter就厉害了，利用change中的信息，可以实现对输入框的各种格式需求，上面例子中让输入框只能输入数字只是TextFormatter的冰山一角，还可以实现各种各样的其他需求，例如让输入框中的值只能是浮点数，只能是字母，字符数只能是6位。有了它，都可以不用对它的值再进行额外的校验，而且可以通用起来，只需要编写不同的过滤器就可以了。</p><h3 id="源码解析：TextFormatter是如何发挥作用的？"><a href="#源码解析：TextFormatter是如何发挥作用的？" class="headerlink" title="源码解析：TextFormatter是如何发挥作用的？"></a>源码解析：TextFormatter是如何发挥作用的？</h3><p>从上面的分析我们可以清楚的看到是TextFormatter中的filter发挥了过滤作用，而TextFormatter是给TextField使用的，那么TextFormatter必定有函数给TextField来调用，所以我们找到了getFilter，我们在TextField中找这个函数可以看到：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces a range of characters with the given text.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start The starting index in the range, inclusive. This must be &amp;gt;= 0 and &amp;lt; the end.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end The ending index in the range, exclusive. This is one-past the last character to</span></span><br><span class="line"><span class="comment"> *            delete (consistent with the String manipulation methods). This must be &amp;gt; the start,</span></span><br><span class="line"><span class="comment"> *            and &amp;lt;= the length of the text.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text The text that is to replace the range. This must not be null.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceText</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> end, <span class="keyword">final</span> String text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span></span><br><span class="line">        || end &gt; getLength()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.text.isBound()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldLength = getLength();</span><br><span class="line">        TextFormatter&lt;?&gt; formatter = getTextFormatter();</span><br><span class="line">        TextFormatter.Change change = <span class="keyword">new</span> TextFormatter.Change(<span class="keyword">this</span>, getFormatterAccessor(), start, end, text);</span><br><span class="line">        <span class="keyword">if</span> (formatter != <span class="keyword">null</span> &amp;&amp; formatter.getFilter() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            change = formatter.getFilter().apply(change);</span><br><span class="line">            <span class="keyword">if</span> (change == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the content</span></span><br><span class="line">        updateContent(change, oldLength == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Positions the anchor and caretPosition explicitly.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRange</span><span class="params">(<span class="keyword">int</span> anchor, <span class="keyword">int</span> caretPosition)</span> </span>&#123;</span><br><span class="line">    caretPosition = Utils.clamp(<span class="number">0</span>, caretPosition, getLength());</span><br><span class="line">    anchor = Utils.clamp(<span class="number">0</span>, anchor, getLength());</span><br><span class="line"></span><br><span class="line">    TextFormatter.Change change = <span class="keyword">new</span> TextFormatter.Change(<span class="keyword">this</span>, getFormatterAccessor(), anchor, caretPosition);</span><br><span class="line">    TextFormatter&lt;?&gt; formatter = getTextFormatter();</span><br><span class="line">    <span class="keyword">if</span> (formatter != <span class="keyword">null</span> &amp;&amp; formatter.getFilter() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        change = formatter.getFilter().apply(change);</span><br><span class="line">        <span class="keyword">if</span> (change == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateContent(change, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">filterAndSet</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Send the new value through the textFormatter, if one exists.</span></span><br><span class="line">    TextFormatter&lt;?&gt; formatter = getTextFormatter();</span><br><span class="line">    <span class="keyword">int</span> length = content.length();</span><br><span class="line">    <span class="keyword">if</span> (formatter != <span class="keyword">null</span> &amp;&amp; formatter.getFilter() != <span class="keyword">null</span> &amp;&amp; !text.isBound()) &#123;</span><br><span class="line">        TextFormatter.Change change = <span class="keyword">new</span> TextFormatter.Change(</span><br><span class="line">                TextInputControl.<span class="keyword">this</span>, getFormatterAccessor(), <span class="number">0</span>, length, value, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        change = formatter.getFilter().apply(change);</span><br><span class="line">        <span class="keyword">if</span> (change == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        replaceText(change.start, change.end, change.text, change.getAnchor(), change.getCaretPosition());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        replaceText(<span class="number">0</span>, length, value, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，从TextField源码中我们找到了三个与TextFormatter的filter有关的方法，他们的大致意思就是当有变化产生时（例如按下字符<code>1</code>），就会触发一个change产生，然后就会调用filter来产生一个新的change对象，这个对象会改变最终输入框中的内容。</p><h3 id="陌生知识：UnaryOperator"><a href="#陌生知识：UnaryOperator" class="headerlink" title="陌生知识：UnaryOperator"></a>陌生知识：UnaryOperator</h3><p>和大家一样，平时很少看到这个类，我百度查了一下，这个类叫一元运算符，它继承自<code>java.util.function.Function</code>，是jdk中的内容，不是javafx的（包括UnaryOperator也是jdk的内容），源码是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents an operation on a single operand that produces a result of the</span></span><br><span class="line"><span class="comment"> * same type as its operand.  This is a specialization of &#123;<span class="doctag">@code</span> Function&#125; for</span></span><br><span class="line"><span class="comment"> * the case where the operand and result are of the same type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is a &lt;a href="package-summary.html"&gt;functional interface&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * whose functional method is &#123;<span class="doctag">@link</span> #apply(Object)&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the type of the operand and result of the operator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UnaryOperator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a unary operator that always returns its input argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input and output of the operator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a unary operator that always returns its input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">UnaryOperator&lt;T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的意思是输入和输出是同一个值，函数<code>identity</code>的意思是总是返回输入的参数，而且只有一个参数，这个一元操作符UnaryOperator被注解@FuntionalInterface了，它是java.lang.包中的内容，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FunctionalInterface &#123;&#125;</span><br></pre></td></tr></table></figure><p>已经涉及到很深的内容了，而<code>identity</code>我猜测应该是与jdk内部实现有关的，会被自动调用的，所有关于他们就到此为止，不再深入分析。</p><p>而我注意到一点，一元操作符UnaryOperator有更优雅的用法。文章开头我们注意到IntegerFilter，我们的写法是让它实现UnaryOperator，但其实可以这么做：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">textfield.setTextFormatter(<span class="keyword">new</span> TextFormatter&lt;String&gt;((change)-&gt;&#123;</span><br><span class="line">    Pattern DIGIT_PATTERN = Pattern.compile(<span class="string">"\\d*"</span>);</span><br><span class="line">    <span class="keyword">return</span> DIGIT_PATTERN.matcher(change.getText()).matches() ? change : <span class="keyword">null</span>;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>为啥变化这么大？</p><p>慢慢分析发现对lambda知识的了解的欠缺，接下来的内容涉及到java函数式编程lambda表达式的核心内容，敬请下篇文章更新(<em>^▽^</em>)</p><p>转载请注明出处：<a href="https://www.cmlanche.com/">https://www.cmlanche.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;直击主题：它在JavaFx中可以实现什么效果&quot;&gt;&lt;a href=&quot;#直击主题：它在JavaFx中可以实现什么效果&quot; class=&quot;headerlink&quot; title=&quot;直击主题：它在JavaFx中可以实现什么效果&quot;&gt;&lt;/a&gt;直击主题：它在JavaFx中可以实现什么效果&lt;/h3&gt;&lt;p&gt;它可以格式化输入文本的内容，可以允许输入哪种值，可以规定光标的位置，例如可以实现一个输入框只允许输入数字，&lt;/p&gt;
&lt;p&gt;例如&lt;code&gt;textfield&lt;/code&gt;表示输入框对象，那么设置格式化内容的话就应该像这样子：&lt;code&gt;textfield.setTextformatter(new TextFormatter&amp;lt;String&amp;gt;(IntegerFilter))&lt;/code&gt;, 而其中&lt;code&gt;IntegerFilter&lt;/code&gt;就是只允许输入数字的过滤器，它的代码是怎样的呢？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Created by cmlanche on 2017/7/10.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 整数过滤器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 应用：比如使一个输入框只能输入数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IntegerFilter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UnaryOperator&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TextFormatter&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Change&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Pattern DIGIT_PATTERN = Pattern.compile(&lt;span class=&quot;string&quot;&gt;&quot;\\d*&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TextFormatter.&lt;span class=&quot;function&quot;&gt;Change &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TextFormatter.Change change)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DIGIT_PATTERN.matcher(change.getText()).matches() ? change : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;DIGIT_PATTERN大家都能看出来它是正则表达式，是匹配文本是否是整数的表达式。&lt;/p&gt;
&lt;p&gt;apply方法中的实现的意思是，只要符合整数就返回change，否则返回null&lt;/p&gt;
    
    </summary>
    
    
      <category term="javafx" scheme="http://www.cmlanche.com/tags/javafx/"/>
    
      <category term="textformatter" scheme="http://www.cmlanche.com/tags/textformatter/"/>
    
      <category term="unaryoperator" scheme="http://www.cmlanche.com/tags/unaryoperator/"/>
    
      <category term="lambda表达式" scheme="http://www.cmlanche.com/tags/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Unable to start monitor 4454, An other instance is problaly using the same port</title>
    <link href="http://www.cmlanche.com/2018/07/18/Unable-to-start-monitor-4454,-An-other-instance-is-problaly-using-the-same-port/"/>
    <id>http://www.cmlanche.com/2018/07/18/Unable-to-start-monitor-4454,-An-other-instance-is-problaly-using-the-same-port/</id>
    <published>2018-07-18T07:00:26.000Z</published>
    <updated>2018-07-18T07:12:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近两个月启动IDEA一直这个错误，终于今天忍不住了，找了下解决这个问题的方法</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fte0ysjmz2j30ow09gdgz.jpg" width="400px"></p><p>造成IDEA启动失败。</p><a id="more"></a><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>禁用或者卸载Log4JPlugin插件，这个插件没什么卵用，14年之后就不再更新了。</p><h3 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h3><p>菜单Preferences-&gt;Plugins，然后搜索log4JPlugin就出来了，然后Uninstall卸载</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fte17sd0c8j31iy0tmdmn.jpg" alt="image-20180718151011317"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近两个月启动IDEA一直这个错误，终于今天忍不住了，找了下解决这个问题的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fte0ysjmz2j30ow09gdgz.jpg&quot; width=&quot;400px&quot;&gt;&lt;/p&gt;
&lt;p&gt;造成IDEA启动失败。&lt;/p&gt;
    
    </summary>
    
    
      <category term="idea" scheme="http://www.cmlanche.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>解决Android Robotium(Instrumentation)初始化时getActivity阻塞的问题</title>
    <link href="http://www.cmlanche.com/2018/07/17/%E8%A7%A3%E5%86%B3Android-Robotium%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%B6getActivity%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.cmlanche.com/2018/07/17/解决Android-Robotium初始化时getActivity不返回的问题/</id>
    <published>2018-07-17T03:52:23.000Z</published>
    <updated>2018-07-18T05:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如果应用没有启动，阻塞了"><a href="#如果应用没有启动，阻塞了" class="headerlink" title="如果应用没有启动，阻塞了"></a>如果应用没有启动，阻塞了</h3><p>这种情况getActivity肯定会阻塞的，你需要调用startActivity启动起来：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getInstrumentation().getTargetContext().startActivity(intent);</span><br></pre></td></tr></table></figure><p>如果在Robotium中还是没启动，你就需要借助外力来启动它了，比如命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">am start .... // 代码未写完整，意思就是你需要借助am的命令来启动应用</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="如果应用启动了，但还是阻塞了"><a href="#如果应用启动了，但还是阻塞了" class="headerlink" title="如果应用启动了，但还是阻塞了"></a>如果应用启动了，但还是阻塞了</h3><p>有两种方式可以尝试，第一种：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ActivityMonitor monitor = getInstrumentation().addMonitor(activity.getName(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">Activity activity = getInstrumentation().waitForMonitorWithTimeout(monitor, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p>这种方式的意思是，对测试的Activity追加一个Monitor来追踪它的状态，并等待返回一个Activity对象，超时时间为10s。但是这种方式未必总是有效，在极端情况下，还是会阻塞。此时你就需要用第二种方式尝试获取Activity了</p><p>第二种方式：<strong>Java反射</strong></p><p>通过观察第一种方式的实现源码，我们发现被测Activity都是存放在<code>Instrumentation =&gt; ActivityThread(mThread) =&gt; ArrayMap&lt;IBinder, ActivityClientRecord&gt;(mActivities) =&gt; Activity</code>的一个map中的，那么我们通过反射的方式剥离3层，可以拿到这个对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object mThread = ReflectHelper.getField(getInstrumentation(), Instrumentation.class.getName(), <span class="string">"mThread"</span>);</span><br><span class="line">Log.e(<span class="string">"tag"</span>, <span class="string">"inst mthread = "</span> + mThread);</span><br><span class="line"><span class="keyword">if</span> (mThread != <span class="keyword">null</span>) &#123;</span><br><span class="line">   Object mActivities = ReflectHelper.getField(mThread, <span class="keyword">null</span>, <span class="string">"mActivities"</span>);</span><br><span class="line">   Log.e(<span class="string">"tag"</span>, <span class="string">"inst mActivities = "</span> + mActivities);</span><br><span class="line">   <span class="keyword">if</span> (mActivities != <span class="keyword">null</span> &amp;&amp; mActivities <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">       Map actMap = (Map) mActivities;</span><br><span class="line">       Set&lt;Map.Entry&gt; sets = actMap.entrySet();</span><br><span class="line">       Iterator&lt;Map.Entry&gt; iterable = sets.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterable.hasNext()) &#123;</span><br><span class="line">           Map.Entry entry = iterable.next();</span><br><span class="line">           Object actRecObj = entry.getValue();</span><br><span class="line">           Log.e(<span class="string">"tag"</span>, <span class="string">"ActivityClientRecord: "</span> + actRecObj);</span><br><span class="line">           Object actObj = ReflectHelper.getField(actRecObj, <span class="keyword">null</span>, <span class="string">"activity"</span>);</span><br><span class="line">           Log.e(<span class="string">"tag"</span>, <span class="string">"Activity: "</span> + actObj);</span><br><span class="line">           <span class="keyword">if</span> (actObj != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> (Activity) actObj;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的种种方式可以完全解决getActivity阻塞的问题！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如果应用没有启动，阻塞了&quot;&gt;&lt;a href=&quot;#如果应用没有启动，阻塞了&quot; class=&quot;headerlink&quot; title=&quot;如果应用没有启动，阻塞了&quot;&gt;&lt;/a&gt;如果应用没有启动，阻塞了&lt;/h3&gt;&lt;p&gt;这种情况getActivity肯定会阻塞的，你需要调用startActivity启动起来：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getInstrumentation().getTargetContext().startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在Robotium中还是没启动，你就需要借助外力来启动它了，比如命令：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;am start .... // 代码未写完整，意思就是你需要借助am的命令来启动应用&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Robotium" scheme="http://www.cmlanche.com/tags/Robotium/"/>
    
      <category term="自动化研发" scheme="http://www.cmlanche.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%A0%94%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Bloogle开发日记 | 制作一个滚动大纲的前端网页</title>
    <link href="http://www.cmlanche.com/2018/07/11/%E4%BB%8E%E9%9B%B6%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%BB%9A%E5%8A%A8markdown%E5%A4%A7%E7%BA%B2%E7%9A%84%E5%89%8D%E7%AB%AF%E7%BD%91%E9%A1%B5/"/>
    <id>http://www.cmlanche.com/2018/07/11/从零制作一个滚动markdown大纲的前端网页/</id>
    <published>2018-07-11T00:19:58.000Z</published>
    <updated>2018-07-17T05:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>从零教学怎么制作一个滚动大纲</p><p><img src="http://pboedpdg9.bkt.clouddn.com/letsblog%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E6%BB%9A%E5%8A%A8%E5%A4%A7%E7%BA%B2.gif" alt></p><a id="more"></a><h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>大纲区域是一个列表，列表中的每项的超链接<code>&lt;a&gt;</code>都有一个<code>#id</code>的超链接指向gif中左侧的内容区域的heading标题</p><h3 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h3><ol><li>当滚动时，我们要求大纲区域停靠在顶部</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取大纲侧边栏的元素对象</span></span><br><span class="line"><span class="keyword">var</span> aside = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"outline"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 获取大纲侧边栏的元素对象距离浏览器顶部的距离</span></span><br><span class="line"><span class="keyword">var</span> aside_sticky_offset_top = aside.offsetTop;</span><br><span class="line"><span class="comment">// 当窗口滚动会触发window.onscroll方法</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// window.pageYOffset是滚动条在垂直方向上的滚动距离</span></span><br><span class="line">    <span class="comment">// 当滚动距离大于aside_sticky_offset_top时，表示大纲侧边栏滚动到了顶部，要求大纲停靠在顶部不动</span></span><br><span class="line">    <span class="comment">// 则可以给css增加一个class，aside-sticky</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageYOffset &gt; aside_sticky_offset_top) &#123;</span><br><span class="line">        aside.classList.add(<span class="string">"aside-sticky"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        aside.classList.remove(<span class="string">"aside-sticky"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.aside-sticky</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>继续滚动，当浏览器窗口越过某个heading标题的时候，要求将对应的大纲侧边栏的列表项设置为active活动状态。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollDetactHeading</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有的heading标题对象</span></span><br><span class="line">    <span class="keyword">var</span> headings = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"heading"</span>);</span><br><span class="line">    <span class="keyword">var</span> nearestHeading = <span class="literal">null</span>, nearestHeadingPageYOffset = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.clear();</span><br><span class="line">    <span class="comment">// 循环遍历所有标题对象，找出当前选择的是哪个标题</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; headings.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = headings[i];</span><br><span class="line">        <span class="comment">// 计算标题距离浏览器视窗顶部的距离</span></span><br><span class="line">        <span class="keyword">var</span> result = h.offsetTop - <span class="built_in">window</span>.pageYOffset;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">        <span class="comment">// 只有为0或者为负数才表示浏览器窗口顶部穿过了标题栏下的内容区域</span></span><br><span class="line">       <span class="comment">// 并且result的负数值越大，越表示当前最近标题是谁</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === result) &#123;</span><br><span class="line">            nearestHeading = h;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nearestHeadingPageYOffset == <span class="literal">null</span> ||</span><br><span class="line">                nearestHeadingPageYOffset &lt;= result) &#123;</span><br><span class="line">                nearestHeadingPageYOffset = result;</span><br><span class="line">                nearestHeading = h;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果nearestHeading不为空，表示找到了当前所选择的标题</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != nearestHeading) &#123;</span><br><span class="line">        <span class="comment">// 找到侧边栏对象，清空侧边栏对象列表项的所有活动状态</span></span><br><span class="line">        <span class="keyword">var</span> menulist = <span class="built_in">document</span>.querySelector(<span class="string">".outline .menu-list"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; menulist.children.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = menulist.children[i].getElementsByTagName(<span class="string">"a"</span>)[<span class="number">0</span>];</span><br><span class="line">            a.classList.remove(<span class="string">"is-active"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找出最终活动的列表项，设置为active的状态</span></span><br><span class="line">        <span class="keyword">var</span> activeA = <span class="built_in">document</span>.querySelector(<span class="string">"a[href='#"</span> + nearestHeading.id + <span class="string">"']"</span>);</span><br><span class="line">        activeA.classList.add(<span class="string">"is-active"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageYOffset &gt; aside_sticky_offset_top) &#123;</span><br><span class="line">        aside.classList.add(<span class="string">"aside-sticky"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        aside.classList.remove(<span class="string">"aside-sticky"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当滚动时触发大纲滚动检测</span></span><br><span class="line">    scrollDetactHeading();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="开源地址：https-github-com-letsblogio-website-pure-html"><a href="#开源地址：https-github-com-letsblogio-website-pure-html" class="headerlink" title="开源地址：https://github.com/letsblogio/website-pure-html"></a>开源地址：<a href="https://github.com/letsblogio/website-pure-html" target="_blank" rel="noopener">https://github.com/letsblogio/website-pure-html</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从零教学怎么制作一个滚动大纲&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pboedpdg9.bkt.clouddn.com/letsblog%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E6%BB%9A%E5%8A%A8%E5%A4%A7%E7%BA%B2.gif&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="bloogle" scheme="http://www.cmlanche.com/tags/bloogle/"/>
    
      <category term="网页前端" scheme="http://www.cmlanche.com/tags/%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
