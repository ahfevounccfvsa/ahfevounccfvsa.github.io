<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cmlanche</title>
  
  <subtitle>越努力越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cmlanche.com/"/>
  <updated>2019-06-17T05:02:08.000Z</updated>
  <id>http://www.cmlanche.com/</id>
  
  <author>
    <name>cmlanche</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>陪伴阿里云走过的5年之路</title>
    <link href="http://www.cmlanche.com/2019/06/16/%E9%99%AA%E4%BC%B4%E9%98%BF%E9%87%8C%E4%BA%91%E8%B5%B0%E8%BF%87%E7%9A%845%E5%B9%B4%E4%B9%8B%E8%B7%AF/"/>
    <id>http://www.cmlanche.com/2019/06/16/陪伴阿里云走过的5年之路/</id>
    <published>2019-06-16T14:53:07.000Z</published>
    <updated>2019-06-17T05:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一次使用阿里云"><a href="#第一次使用阿里云" class="headerlink" title="第一次使用阿里云"></a>第一次使用阿里云</h3><p>那个时候是2014年，我刚刚从大学毕业出来进入社会工作，这一年也是我萌生想额外做点产品的想法的时候，于是我找到了阿里云。</p><p>翻开阿里云的支付记录，可以清晰的看到第一笔支付发生在2014年3月9日：</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-16-150130.png?x-oss-process=style/logomark" alt="image-20190616230120771"></p><h3 id="126个交易记录"><a href="#126个交易记录" class="headerlink" title="126个交易记录"></a>126个交易记录</h3><p>时至今日2019年中旬618的时候，我已经从一个阿里云新手成长为了阿里云大使，总共发生了126个交易记录，这5年时间里，阿里云陪我走过了成长最快的工作生活。</p><p>开始我还只是会windows server，因为它有图形界面，那个时候对linux恐惧颇深，感觉深不可测，无法控制。而到现在，我已经精通linux，centos，Ubuntu等系统了。这也是在阿里云服务器中慢慢学习过来的。</p><a id="more"></a><h3 id="夭折了几个产品"><a href="#夭折了几个产品" class="headerlink" title="夭折了几个产品"></a>夭折了几个产品</h3><p>之前看<a href="https://www.sitebuilderreport.com/" target="_blank" rel="noopener">sitebuilderreport.com</a>的采访，链接：<a href="http://sideidea.com/article/3" target="_blank" rel="noopener">http://sideidea.com/article/3</a>，知道它月赚29万人民币，这还是2年前的事情了，我就想着模仿它做类似的网站，于是用阿里云做了第一个站，叫virturlhostreport.com，意思就是虚拟主机报告，想做这一块的主机深度评测网站，但是夭折了，一部分也是因为虚拟主机已经日落西山了，另一部分是seo始终没做上去，关键还是我不够坚持吧。</p><p>后来又做了主机排行网，这次就不限定是虚拟主机了，包括云主机和vps，这个网站是采用ghost博客来做的，自己用纯html+css+js来做的，网站速度极快，有网友评论说，”快到让人窒息”。这个网站大概给我挣了2k吧，发布更新了十几个版本，但就是因为更新迭代内容太慢，每次更新基本都需要我重新升级主题，而且我在对主机评测上又有了新的见解。</p><h3 id="现在的产品"><a href="#现在的产品" class="headerlink" title="现在的产品"></a>现在的产品</h3><p>我认为大的客户厂家的服务器基本没有什么性能啊优劣之分，最大的区别在于优惠、价格，如何能帮助客户省钱省时间省力气才是重点，省钱是第一要务。而且不同的客户的省钱方式不太一样，新手和老手不一样，个人和企业又不一样，需求有多种多样。因此我开发了现在的全面的主机优惠站<a href="https://zhaozhuji.info/" target="_blank" rel="noopener">找主机网</a>，简单截个图：</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-16-153317.jpg?x-oss-process=style/logomark" alt="WX20190616-233157@2x_meitu_2"></p><p>这个网站是我花了大概2个月的业余时间完成的，很是艰辛，基本每天都有提交记录。</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-16-153617.jpg?x-oss-process=style/logomark" alt="dd_meitu_3"></p><p>中间ui写了又换，bootstrap尝试过，放弃了，因为ui实在难看，也在themesforest上买过付费主题，但太笨重，js一大推，弄的我整个工程加载都很忙，界面也不大好，最后采用了bulma的纯css框架做的前端，整个站也按标准的css设计规则来做了，都知道程序员的ui感觉不大好，其实到现在我都觉得我的网站的ui不好看，哪天我还会再整。</p><p>我也设计了后台管理，方面我快速增加内容，修改需求，这也是从上面的失败案例主机排行网而来的，我得能够轻松快速的紧跟市场啊。我甚至自己设计SEO还有站点地图，稍微截个图吧：</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-16-154219.jpg?x-oss-process=style/logomark" alt="ad_meitu_4"></p><p><strong>为什么要自己写，而不是用WordPress？</strong></p><p>因为WordPress我不太会那些优化，而且关键是不符合我的需求，我是要能够定制不同的客户需求的，WordPress就是无脑的堆砌文章，现在市面上很多主机推荐网站，基本都采用WordPress，但是说真的，里面的内容眼花缭乱的，我认为根本给不到用户实质的价值，这些乱七八糟的内容其实是给搜索引擎看的，至于用户体验，拉倒吧，随你咋看。你去看<a href="https://www.sitebuilderreport.com/" target="_blank" rel="noopener">sitebuilderreport.com</a>，它的内容就井然有序，用户看着非常舒服，它也是作者完全自己写的。</p><h3 id="云大使的收入"><a href="#云大使的收入" class="headerlink" title="云大使的收入"></a>云大使的收入</h3><p>相比很多大佬来说很少，目前总共1427.97元，其中还有80000云气还没兑现。</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-16-155010.png?x-oss-process=style/logomark" alt="image-20190616235009159"></p><p>总共推广了大概150人，累积8人购买。</p><h3 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h3><p>坚持把<a href="https://zhaozhuji.info/" target="_blank" rel="noopener">找主机网zhaozhuji.info</a>做下去，坚持每天更新一篇文章，把seo做上去，能够形成不错的自然流量，到那时，也不至于跟现在这样推广的如此艰辛。</p><p>可以的话，帮我点个赞，地址：<a href="https://www.aliyun.com/acts/hi618/delivery?storyId=874749&amp;userCode=mm1tv2if" target="_blank" rel="noopener">https://www.aliyun.com/acts/hi618/delivery?storyId=874749&amp;userCode=mm1tv2if</a>，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一次使用阿里云&quot;&gt;&lt;a href=&quot;#第一次使用阿里云&quot; class=&quot;headerlink&quot; title=&quot;第一次使用阿里云&quot;&gt;&lt;/a&gt;第一次使用阿里云&lt;/h3&gt;&lt;p&gt;那个时候是2014年，我刚刚从大学毕业出来进入社会工作，这一年也是我萌生想额外做点产品的想法的时候，于是我找到了阿里云。&lt;/p&gt;
&lt;p&gt;翻开阿里云的支付记录，可以清晰的看到第一笔支付发生在2014年3月9日：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-16-150130.png?x-oss-process=style/logomark&quot; alt=&quot;image-20190616230120771&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;126个交易记录&quot;&gt;&lt;a href=&quot;#126个交易记录&quot; class=&quot;headerlink&quot; title=&quot;126个交易记录&quot;&gt;&lt;/a&gt;126个交易记录&lt;/h3&gt;&lt;p&gt;时至今日2019年中旬618的时候，我已经从一个阿里云新手成长为了阿里云大使，总共发生了126个交易记录，这5年时间里，阿里云陪我走过了成长最快的工作生活。&lt;/p&gt;
&lt;p&gt;开始我还只是会windows server，因为它有图形界面，那个时候对linux恐惧颇深，感觉深不可测，无法控制。而到现在，我已经精通linux，centos，Ubuntu等系统了。这也是在阿里云服务器中慢慢学习过来的。&lt;/p&gt;
    
    </summary>
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/categories/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
      <category term="找主机网" scheme="http://www.cmlanche.com/tags/%E6%89%BE%E4%B8%BB%E6%9C%BA%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>奔三分水岭杂想</title>
    <link href="http://www.cmlanche.com/2019/06/16/%E5%A5%94%E4%B8%89%E5%88%86%E6%B0%B4%E5%B2%AD%E6%9D%82%E6%83%B3/"/>
    <id>http://www.cmlanche.com/2019/06/16/奔三分水岭杂想/</id>
    <published>2019-06-16T11:00:38.000Z</published>
    <updated>2019-06-16T11:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/34v42.jpg?x-oss-process=style/logomark" alt="bensan_meitu_2"></p><p>昨天周六，在家折腾一天新创意，比如做dota2的赛况的小程序，结果审核不让通过，说需要提供4种”让人生畏”的材料，如下图：</p><a id="more"></a><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/ln7s7.png?x-oss-process=style/logomark" alt="image-20190616174938250"></p><p>基本上你想做类似于游戏沾边，热门关键词的话，个人和部分企业是无法申请的，直接把你们拒之门外。</p><p>想到，在中国做点东西真tm难，做出来难，能不能做更是难上加难，尤其对独立开发者来说。国内对创业的环境月来越差，对独立开发者来说也更加艰难，那些能在夹缝中生存的独立开发者，内心真心的佩服。</p><p>我接触了大概600位独立开发者和对独立开发者有兴趣的人，能够真正全职独立的少指又少，阿里一位个人开发者跟我说，”我看大佬们一通操作之后，发现还是上班最靠谱！”，确实啊，真正能做到独立开发大笔盈利的很少。</p><p>我以前对自己说，只要我能够自己稳定一个月赚5k，我就要全职，然后把三倍的时间把5k换成15k。想法很理想，能不能实现倒不说，就算能实现，那也是要经历极其残忍和痛苦的过程，可能这期间你的婚姻、家庭、父母等都承受更多压力，并且以后每天都在担心受怕中，也没有社保公积金等一些社会福利，你是独自一个人在战斗，风险过于庞大，如果你没有靠谱的资金后盾，那这几乎是送死的行为！</p><p>可能是我太着急，也可能是我压力太大，我个人家庭情况不允许我做这样的行为，我之前过的很理想，现在想明白了，我应该找一座能让我干一辈子的一个城，把自己最擅长的专业做到好，这是基本，可以填补我内心的焦躁不安。</p><p>可是我内心的理想却无法填补，一直对自己说，人生不干出名堂，枉来人世了，我的大学的座右铭还是”会当凌绝顶”，我的个人博客标题还是”金鳞岂是池中物”的豪言壮语，可是如今已奔三的我，感受到了什么是婚姻压力，什么是父母健康，什么是未来，我站在人生的分水岭，彷徨而不安，可又没有办法，在奔三的时候，我感觉我看到了我的未来。</p><p>我内心已有答案，人生什么最重要？<strong>我觉得是快乐，是父母的快乐，是兄弟姐妹的快乐，是妻子儿女的快乐，也是我的快乐</strong>，人生确实要有追求，但是不能急于给自己太大的压力去速成，犹记得三国杀某个英雄的一句话”静待良机，一鸣惊人”，慢慢来。</p><p>答案是什么？我的答案就是<strong>莫把客为本</strong>，过快乐生活，我想当个”真正自由人”，想财务解放，奈何实力不允许，那就静待良机吧。</p><p>每个人的答案都可能不一样，莫抄！</p><p>说完，我拿起手机，打开沉睡半年的王者荣耀(滑稽 ~ 玩笑话)</p><p>— 补充</p><p>今天父亲节，深知老爸不容易，祝老爸身体健康，万事如意。也祝各位围观的同学的父亲健健康康，一切都好！</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/8hduv.jpg?x-oss-process=style/logomark" alt="fqj_meitu_1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/34v42.jpg?x-oss-process=style/logomark&quot; alt=&quot;bensan_meitu_2&quot;&gt;&lt;/p&gt;
&lt;p&gt;昨天周六，在家折腾一天新创意，比如做dota2的赛况的小程序，结果审核不让通过，说需要提供4种”让人生畏”的材料，如下图：&lt;/p&gt;
    
    </summary>
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/categories/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>推广渠道系列 - 豆瓣帖子</title>
    <link href="http://www.cmlanche.com/2019/06/12/%E6%8E%A8%E5%B9%BF%E6%B8%A0%E9%81%93%E7%B3%BB%E5%88%97---%E8%B1%86%E7%93%A3/"/>
    <id>http://www.cmlanche.com/2019/06/12/推广渠道系列---豆瓣/</id>
    <published>2019-06-12T13:46:10.000Z</published>
    <updated>2019-06-17T01:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>独立开发者往往都不擅长推广，我也一样，但也得学会做推广，推广是慢慢的事情，无法一气呵成，因为穷。</p><p>在做完zhaozhuji.info这个站点后，发现最终还是得落实到推广上，因此我推出”推广渠道系列”文章，把我遇到的好的推广工具、方式分享出来，供大家参考。</p></blockquote><p>今天分享的是，<strong>豆瓣帖子</strong>。</p><a id="more"></a><p>经常搜索，发现很多内容豆瓣帖子都排在前面。</p><p>举例子：搜索”小众it技术社区”</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/resources/uwxup.png" alt="WX20190612-213514@2x"></p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/resources/fhfn2.png" alt="WX20190612-213533@2x"></p><p>其实内容不多，一个标题还有内容，没有seo的关键字和描述，但是这个页面被百度收录了，通过标题可以搜得到。</p><p>我们不妨效仿一下，在豆瓣上发布你的推广，注重标题和内容，期待它哪一天能够爆发！</p><p>比如我推广我的找主机网</p><p>标题：”2019年阿里云2.4折优惠购买指南”</p><p>内容：”阿里云对中国用户来说是最好的云计算服务厂商了，而它提供的优惠也多种多样，不管对玩主机的新手还是老手，面对各种各样的活动都会陷入眼花缭乱的困境，因此，我专门写一篇文章来给大家抽丝剥茧，详细描绘一下对不同的用户怎么购买主机才是最优惠的。”</p><p>外加一张截图和原文链接，猛戳看效果：<a href="https://www.douban.com/group/topic/143072327/" target="_blank" rel="noopener">https://www.douban.com/group/topic/143072327/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;独立开发者往往都不擅长推广，我也一样，但也得学会做推广，推广是慢慢的事情，无法一气呵成，因为穷。&lt;/p&gt;
&lt;p&gt;在做完zhaozhuji.info这个站点后，发现最终还是得落实到推广上，因此我推出”推广渠道系列”文章，把我遇到的好的推广工具、方式分享出来，供大家参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天分享的是，&lt;strong&gt;豆瓣帖子&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="推广渠道系列" scheme="http://www.cmlanche.com/categories/%E6%8E%A8%E5%B9%BF%E6%B8%A0%E9%81%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="推广" scheme="http://www.cmlanche.com/tags/%E6%8E%A8%E5%B9%BF/"/>
    
      <category term="推广渠道" scheme="http://www.cmlanche.com/tags/%E6%8E%A8%E5%B9%BF%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>2019年阿里云主机优惠购买指南</title>
    <link href="http://www.cmlanche.com/2019/06/09/2019%E5%B9%B4%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E6%9C%BA%E4%BC%98%E6%83%A0%E8%B4%AD%E4%B9%B0%E6%8C%87%E5%8D%97/"/>
    <id>http://www.cmlanche.com/2019/06/09/2019年阿里云主机优惠购买指南/</id>
    <published>2019-06-09T04:03:27.000Z</published>
    <updated>2019-06-09T04:05:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阿里云对中国用户来说是最好的云计算服务厂商了，而它提供的优惠也多种多样，不管对玩主机的新手还是老手，面对各种各样的活动都会陷入眼花缭乱的困境，因此，我专门写一篇文章来给大家抽丝剥茧，详细描绘一下对不同的用户怎么购买主机才是最优惠的。</p></blockquote><h3 id="优惠活动图"><a href="#优惠活动图" class="headerlink" title="优惠活动图"></a>优惠活动图</h3><p>本人是拥有十年程序猿开发经验，大学本科四年，工作6年，软件工程出身，所以我用我们程序猿特有的软件来绘制一个优惠活动图。</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-08-095844.jpg?x-oss-process=style/logomark" alt="主机购买指南"></p><p>大概花了半个多小时绘制玩这张活动图 /(ㄒoㄒ)/~~</p><a id="more"></a><h3 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h3><ol><li>新用户：没注册过阿里云的用户或者注册且实名了但从未购买任何产品的用户</li><li>首购用户：表示已注册并实名认证后但从未购买该产品的用户</li><li>老用户：已实名并购买过该产品的用户</li></ol><h3 id="活动列表："><a href="#活动列表：" class="headerlink" title="活动列表："></a>活动列表：</h3><ol><li><a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=mm1tv2if" target="_blank" rel="noopener">阿里云新用户2000元新手红包</a></li></ol><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/resources/9kvj2.png" alt="image-20190608181007100"></p><ol start="2"><li><a href="https://www.aliyun.com/acts/hi-group-buying?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">阿里云Hi拼团活动</a></li></ol><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/resources/sfxdi.png" alt="image-20190608181153225"></p><ol start="3"><li><a href="https://promotion.aliyun.com/ntms/act/qwbk.html?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">阿里云首购3折活动</a></li></ol><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/resources/ivsc9.png" alt="image-20190608181258721"></p><h3 id="优惠路线"><a href="#优惠路线" class="headerlink" title="优惠路线"></a>优惠路线</h3><ol><li><strong>新用户路线</strong></li></ol><p><a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=mm1tv2if" target="_blank" rel="noopener">领取2000元红包</a> —&gt; 找老用户<a href="https://www.aliyun.com/acts/hi-group-buying?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">开hi拼团活动</a>  —&gt; 2.4折优惠</p><p><a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=mm1tv2if" target="_blank" rel="noopener">领取2000元红包</a> —&gt; 参加首购活动 —&gt; 3折优惠</p><ol start="2"><li><strong>首购用户路线</strong></li></ol><p>找新用户<a href="https://www.aliyun.com/acts/hi-group-buying?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">开hi拼团活动</a> —&gt; 可以找到 —&gt; 2.4折优惠</p><p>找新用户<a href="https://www.aliyun.com/acts/hi-group-buying?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">开hi拼团活动</a> —&gt; 没找到 —&gt; 3折优惠</p><p>参加<a href="https://promotion.aliyun.com/ntms/act/qwbk.html?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">首购活动</a> —&gt; 3折优惠</p><ol start="3"><li><strong>老用户且非首购路线</strong></li></ol><p>找新用户<a href="https://www.aliyun.com/acts/hi-group-buying?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">开hi拼团活动</a> —&gt; 可以找到 —&gt; 2.4折优惠</p><p>找新用户<a href="https://www.aliyun.com/acts/hi-group-buying?source=5176.11533457&amp;userCode=mm1tv2if&amp;type=copy" target="_blank" rel="noopener">开hi拼团活动</a> —&gt; 没找到 —&gt; 直接购买 —&gt; 3折优惠</p><p>花了大概一个多小时认真写了这篇，也是想给自己刚上线的网站【<a href="https://zhaozhuji.info" target="_blank" rel="noopener">zhaozhuji.info</a>】做做推广，谢谢拜访！</p><p>其实做这个图也是得益于我的一个微信群”独立开发者”的，感谢小程序【魅力拍】作者徐玉丰，算也是给他做做推广，感谢他的启发！</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-08-102802.png?x-oss-process=style/logomark" alt="image-20190608182801166"></p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-08-102828.png?x-oss-process=style/logomark" alt="image-20190608182826446"></p><p>原文地址：<a href="https://zhaozhuji.info/post/2019-aliyun-youhui-tips" target="_blank" rel="noopener">https://zhaozhuji.info/post/2019-aliyun-youhui-tips</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;阿里云对中国用户来说是最好的云计算服务厂商了，而它提供的优惠也多种多样，不管对玩主机的新手还是老手，面对各种各样的活动都会陷入眼花缭乱的困境，因此，我专门写一篇文章来给大家抽丝剥茧，详细描绘一下对不同的用户怎么购买主机才是最优惠的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;优惠活动图&quot;&gt;&lt;a href=&quot;#优惠活动图&quot; class=&quot;headerlink&quot; title=&quot;优惠活动图&quot;&gt;&lt;/a&gt;优惠活动图&lt;/h3&gt;&lt;p&gt;本人是拥有十年程序猿开发经验，大学本科四年，工作6年，软件工程出身，所以我用我们程序猿特有的软件来绘制一个优惠活动图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-06-08-095844.jpg?x-oss-process=style/logomark&quot; alt=&quot;主机购买指南&quot;&gt;&lt;/p&gt;
&lt;p&gt;大概花了半个多小时绘制玩这张活动图 /(ㄒoㄒ)/~~&lt;/p&gt;
    
    </summary>
    
      <category term="主机优惠" scheme="http://www.cmlanche.com/categories/%E4%B8%BB%E6%9C%BA%E4%BC%98%E6%83%A0/"/>
    
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
      <category term="找主机网" scheme="http://www.cmlanche.com/tags/%E6%89%BE%E4%B8%BB%E6%9C%BA%E7%BD%91/"/>
    
      <category term="阿里云主机优惠" scheme="http://www.cmlanche.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E6%9C%BA%E4%BC%98%E6%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>免费logo创建器launchaco</title>
    <link href="http://www.cmlanche.com/2019/05/27/%E5%85%8D%E8%B4%B9logo%E5%88%9B%E5%BB%BA%E5%99%A8launchaco.com/"/>
    <id>http://www.cmlanche.com/2019/05/27/免费logo创建器launchaco.com/</id>
    <published>2019-05-27T04:36:00.000Z</published>
    <updated>2019-05-27T08:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现一个超级好用，并且免费的logo创建器，<a href="https://www.launchaco.com/" target="_blank" rel="noopener">launchaco.com</a>，之前用过<a href="https://shapefactory.co/" target="_blank" rel="noopener">shapefactory.co</a>，也很好用，但是贵的令人发指，一个做好的logo，需要44美金。而今天发现了<code>launchaco.com</code>，感觉发现了一块宝藏，忍不住想分享。好了，现在来复盘一下整个使用流程。</p><a id="more"></a><p>以我最近正在开发的产品：<strong>找主机 zhaozhuji.info为例</strong></p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>打开<a href="https://www.launchaco.com" target="_blank" rel="noopener">launchaco.com</a>官网，选择<code>logo</code>菜单，点击<code>Create Your Logo for Free</code></p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-082526.png?x-oss-process=style/logomark" alt="image-20190527125730237"></p><h3 id="产品取名字"><a href="#产品取名字" class="headerlink" title="产品取名字"></a>产品取名字</h3><p>注意只支持英文字母，不支持中文，这是唯一的瑕疵。而本身这个产品是建立在人工智能上的，中文不仅字体不支持，也不支持含义联想。</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-045829.png?x-oss-process=style/logomark" alt="image-20190527125828249"></p><h3 id="选字体"><a href="#选字体" class="headerlink" title="选字体"></a>选字体</h3><p>没三种选一种字体，会让你选择四五次，它是期望发现你的字体爱好！</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-045902.png?x-oss-process=style/logomark" alt="image-20190527125859614"></p><h3 id="选择主题色"><a href="#选择主题色" class="headerlink" title="选择主题色"></a>选择主题色</h3><p>下图中列出了6中不同的主题色，每一种都代表不同的含义，并且明确标出了，请注意看图的下面。</p><p>这里我选择第一种，<code>Friendly, Loyal, &amp; Strong</code>，代表着友好、尊贵、强大。</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-050143.png?x-oss-process=style/logomark" alt="image-20190527130141993"></p><p>每种主题色都给你配置好了3种色调，并且标明了适用的含义，是不是很方便啦！</p><p>这里我们选择第三种：<code>Peaceful, Limitless, Tranquil, &amp; Friendly</code></p><h3 id="选择logo"><a href="#选择logo" class="headerlink" title="选择logo"></a>选择logo</h3><p>选择3个你喜欢的logo！</p><p>说真的，这个网站的logo真的超级棒，每个我都很喜欢！</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-050610.gif?x-oss-process=style/logomark" alt="kkkk"></p><h3 id="选择搭配"><a href="#选择搭配" class="headerlink" title="选择搭配"></a>选择搭配</h3><p>最后，系统会根据你的选择，给出一系列智能搭配。</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-050927.png?x-oss-process=style/logomark" alt="image-20190527130926493"></p><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p>搭配中，随便选一个，然后编辑，然后点击右上角保存！</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-051701.png?x-oss-process=style/logomark" alt="image-20190527131700176"></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-051732.png?x-oss-process=style/logomark" alt="image-20190527131731317"></p><p>右上角箭头下载后，你会得到png和svg很多资源，想要的都有了，如下图：</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-052442.png?x-oss-process=style/logomark" alt="image-20190527131839225"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有没有感觉很方便？关键是免费啊，基本类似的logo maker都收费，难得发现个免费的。后续我会继续发布有助于独立开发者产品开发的工具，关注我公众号及时提醒。</p><p><img src="https://zhaozhuji1.oss-cn-beijing.aliyuncs.com/zhaozhuji/2019-05-27-081921.jpg?x-oss-process=style/logomark" alt="扫码_搜索联合传播样式-微信标准绿版"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现一个超级好用，并且免费的logo创建器，&lt;a href=&quot;https://www.launchaco.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;launchaco.com&lt;/a&gt;，之前用过&lt;a href=&quot;https://shapefactory.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;shapefactory.co&lt;/a&gt;，也很好用，但是贵的令人发指，一个做好的logo，需要44美金。而今天发现了&lt;code&gt;launchaco.com&lt;/code&gt;，感觉发现了一块宝藏，忍不住想分享。好了，现在来复盘一下整个使用流程。&lt;/p&gt;
    
    </summary>
    
      <category term="独立开发者必备产品帮助工具" scheme="http://www.cmlanche.com/categories/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%85%E5%A4%87%E4%BA%A7%E5%93%81%E5%B8%AE%E5%8A%A9%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
      <category term="logo创建器" scheme="http://www.cmlanche.com/tags/logo%E5%88%9B%E5%BB%BA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>独立开发者的觉悟</title>
    <link href="http://www.cmlanche.com/2019/05/20/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%85%E9%A1%BB%E8%A6%81%E6%9C%89%E4%BB%98%E5%87%BA%E6%88%90%E5%80%8D%E5%8A%AA%E5%8A%9B%E6%89%8D%E8%83%BD%E6%88%90%E5%8A%9F%E7%9A%84%E8%A7%89%E6%82%9F/"/>
    <id>http://www.cmlanche.com/2019/05/20/独立开发者必须要有付出成倍努力才能成功的觉悟/</id>
    <published>2019-05-20T04:44:55.000Z</published>
    <updated>2019-05-20T05:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/gko5e.png" alt="image-20190520130055901"></p><p>经常会做梦，我能躺着挣钱吗？</p><p>作为一穷二白的白丁来讲，这只能做梦了。</p><p>做任何一个产品，都需要花心血去维护运营的。</p><p>不管这个产品是需要怎样的劳动，是轻工具型，还是重内容型，都需要长时间的专注努力，才可能达到你想要的成功。</p><a id="more"></a><p>如果你发现你的产品更新迭代速度很慢，每次更新都要耗费很大的精力，那么请改进迭代流程，用技术手段提高更新效率。</p><p>如果你发现你的产品的访客如流水般，来也快去也快，那就请把产品做得更好，增强用户粘性，让用户一看到你的产品，就欢喜的不得了。小水管一般的流量，用竹篮子如何能装得下？请记住，这样的产品再好的推广也无济于事！</p><p>当然这是目前我出现的问题，所以我才得以轻松说出口，我也会努力做到这两条。</p><p>独立开发者应该要有觉悟，不管产品简单还是复杂，它就像你的孩子，必须得用心呵护和照料，必须的付出成倍的努力才能茁壮成长！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/gko5e.png&quot; alt=&quot;image-20190520130055901&quot;&gt;&lt;/p&gt;
&lt;p&gt;经常会做梦，我能躺着挣钱吗？&lt;/p&gt;
&lt;p&gt;作为一穷二白的白丁来讲，这只能做梦了。&lt;/p&gt;
&lt;p&gt;做任何一个产品，都需要花心血去维护运营的。&lt;/p&gt;
&lt;p&gt;不管这个产品是需要怎样的劳动，是轻工具型，还是重内容型，都需要长时间的专注努力，才可能达到你想要的成功。&lt;/p&gt;
    
    </summary>
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/categories/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
      <category term="觉悟" scheme="http://www.cmlanche.com/tags/%E8%A7%89%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>购买阿里云遇到Permission denied的问题</title>
    <link href="http://www.cmlanche.com/2019/05/15/%E8%B4%AD%E4%B9%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%81%87%E5%88%B0Permission-denied%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.cmlanche.com/2019/05/15/购买阿里云遇到Permission-denied的问题/</id>
    <published>2019-05-15T13:24:11.000Z</published>
    <updated>2019-05-15T13:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近我的新项目友链联盟<a href="https://youlianplus.com" target="_blank" rel="noopener">youlianplus.com</a>项目即将完成，准备拿到阿里云试试，在阿里云华北3购买了一台迷你服务器，1核1g40g硬盘，打算测试一下。</p><p>买了之后，准备用ssh登录进去，结果出现了个<code>permission denied</code>权限被拒绝的问题，详情如下：</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdeMacBook-Pro:blog cmlanche$ ssh root@47.92.24.241</span><br><span class="line">The authenticity of host '47.92.24.241 (47.92.24.241)' can't be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:PYBgUIuFIYcBUCzUGG0qLJDGH2At/dQ+zk+Q9tyX7+E.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added '47.92.24.241' (ECDSA) to the list of known hosts.</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">chengmingdeMacBook-Pro:blog cmlanche$ ssh root@47.92.24.241</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">chengmingdeMacBook-Pro:blog cmlanche$ ssh root@47.92.24.241</span><br><span class="line">Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>意思是说，无法用publickey来登录服务器，那问题肯定出在服务器那边的配置上了，百度找了个解决办法，有效！<a href="https://blog.csdn.net/wtopps/article/details/79449920" target="_blank" rel="noopener">https://blog.csdn.net/wtopps/article/details/79449920</a></p><p>幸好阿里云控制台界面有一个远程连接的控制，通过这个入口进去，可以直接登录。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/1n9wu.png" alt="image-20190515213018736"></p><p>进去后，注意要保存好连接码，这个码只会出现一次！就保存在你电脑中就好了。</p><p>关键步骤：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>修改PasswordAuthentication的值为yes，注意把签名的#去掉</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p>上文连接说要重启httpd服务，其实没啥作用，咱们来硬的，直接重启服务器就好了！</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/pbyme.png" alt="image-20190515213333642"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近我的新项目友链联盟&lt;a href=&quot;https://youlianplus.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;youlianplus.com&lt;/a&gt;项目即将完成，准备拿到阿里云试试，在阿里云华北3购买了一台迷你服务器，1核1g40g硬盘，打算测试一下。&lt;/p&gt;
&lt;p&gt;买了之后，准备用ssh登录进去，结果出现了个&lt;code&gt;permission denied&lt;/code&gt;权限被拒绝的问题，详情如下：&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://www.cmlanche.com/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="阿里云" scheme="http://www.cmlanche.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>springboot项目部署到ubuntu18.04的过程，http跳转https，使用acme.sh安装证书</title>
    <link href="http://www.cmlanche.com/2019/05/14/springboot-ubuntu-https/"/>
    <id>http://www.cmlanche.com/2019/05/14/springboot-ubuntu-https/</id>
    <published>2019-05-14T10:33:53.000Z</published>
    <updated>2019-05-14T11:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发的友链联盟项目即将”竣工”，准备拿到公有云Ubuntu是测试下，想要达到的理想状态有如下几点：</p><ol><li>端口保持9090，发布spring boot的jar包，后台运行</li><li>nginx部署，强制https访问应用</li><li>使用<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">acme.sh</a>来生成、安装ssl证书</li><li>开启防火墙，打开80、443端口，关闭9090端口(避免直接访问9090打开应用)</li></ol><a id="more"></a><p>目前已经完成上面的要求，可以尝试访问<a href="http://sitefriendlinks.com" target="_blank" rel="noopener">http://sitefriendlinks.com</a>、<a href="http://sitefriendlinks.com:9090" target="_blank" rel="noopener">http://sitefriendlinks.com:9090</a>，前者会强制跳转到<a href="https://sitefriendlinks.com" target="_blank" rel="noopener">https://sitefriendlinks.com</a>，后者无法打开。</p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol><li><p>nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><p>安装后自动就启动了，你可以用如下命令进行开启和关闭：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service nginx stop</span><br><span class="line">service nginx start</span><br><span class="line">service nginx restart # 重启</span><br></pre></td></tr></table></figure></li><li><p>mysql</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></table></figure><p>详情请看：<a href="https://www.jianshu.com/p/3821c2603b92" target="_blank" rel="noopener">https://www.jianshu.com/p/3821c2603b92</a></p><p>需要注意修改root密码：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show databases；</span><br><span class="line"> </span><br><span class="line">use mysql;</span><br><span class="line">  </span><br><span class="line">update user set authentication_string=PASSWORD("yourpassword") where user='root';</span><br><span class="line">  </span><br><span class="line">update user set plugin="mysql_native_password";</span><br><span class="line">  </span><br><span class="line">flush privileges;</span><br><span class="line">  </span><br><span class="line">quit;</span><br></pre></td></tr></table></figure></li><li><p>java 8</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install openjdk-8-jre-headless</span><br></pre></td></tr></table></figure><p><a href="[https://www.centos.bz/2018/06/%E5%9C%A8ubuntu-18-04%E4%B8%8A%E4%BD%BF%E7%94%A8apt%E5%AE%89%E8%A3%85java/](https://www.centos.bz/2018/06/在ubuntu-18-04上使用apt安装java/">参考链接</a>)</p></li></ol><h3 id="部署nginx"><a href="#部署nginx" class="headerlink" title="部署nginx"></a>部署nginx</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  sitefriendlinks.com;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  sitefriendlinks.com;</span><br><span class="line">        <span class="attribute">ssl</span>          <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/fullchain.cer;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/sitefriendlinks.com.key;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>   <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>              http://localhost:9090/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>        Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>        X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>        X-Forwarded-Port <span class="variable">$server_port</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用acem-sh安装证书"><a href="#使用acem-sh安装证书" class="headerlink" title="使用acem.sh安装证书"></a>使用acem.sh安装证书</h3><p>参考文档：<a href="https://github.com/Neilpang/acme.sh/wiki/说明" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p><p>关键步骤：</p><ol><li>创建别名</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias acme.sh=~/.acme.sh/acme.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>生成证书</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>安装证书</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh  --installcert  -d  &lt;domain&gt;.com   \</span><br><span class="line">        --key-file   /etc/nginx/ssl/&lt;domain&gt;.key \</span><br><span class="line">        --fullchain-file /etc/nginx/ssl/fullchain.cer \</span><br><span class="line">        --reloadcmd  "service nginx force-reload"</span><br></pre></td></tr></table></figure><p><strong>注意，你需要手动创建/etc/nginx/ssl目录，不如上面的安装命令会报路径错误</strong></p><p>此时，你已经能正常用https打开你的网站了</p><h3 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h3><p>Ubuntu的防火墙命令是ufw，参考：<a href="https://www.cnblogs.com/yuanlipu/p/7103740.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuanlipu/p/7103740.html</a></p><p>先查询下防火墙是否打开：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p>如果没打开，则开启防火墙</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure><p>默认情况下，防火墙是会把所有端口都关闭的，不允许外界访问，但是我们要做三件事：开启80、443端口，关闭9090端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 80</span><br><span class="line">sudo ufw allow 443</span><br><span class="line">sudo ufw deny 9090</span><br></pre></td></tr></table></figure><p>此时，咱们的服务器会变的非常安全，注意哦，因为没打开3306端口，所以你的数据库是无法远程访问的，如需要则打开3306端口即可。</p><h3 id="后台运行spring-boot工程"><a href="#后台运行spring-boot工程" class="headerlink" title="后台运行spring boot工程"></a>后台运行spring boot工程</h3><p>把打包好的jar包发到服务器（通常用scp命令即可），然后执行如下命令即可后台启动：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar sitefriendlinks.jar &gt;&gt; ./output.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><hr><p>ok，部署完成！</p><p>by <a href="https://cmlanche.com" target="_blank" rel="noopener">cmlanche.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开发的友链联盟项目即将”竣工”，准备拿到公有云Ubuntu是测试下，想要达到的理想状态有如下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;端口保持9090，发布spring boot的jar包，后台运行&lt;/li&gt;
&lt;li&gt;nginx部署，强制https访问应用&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&quot;https://github.com/Neilpang/acme.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;acme.sh&lt;/a&gt;来生成、安装ssl证书&lt;/li&gt;
&lt;li&gt;开启防火墙，打开80、443端口，关闭9090端口(避免直接访问9090打开应用)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="部署" scheme="http://www.cmlanche.com/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="springboot" scheme="http://www.cmlanche.com/tags/springboot/"/>
    
      <category term="https" scheme="http://www.cmlanche.com/tags/https/"/>
    
      <category term="ssl" scheme="http://www.cmlanche.com/tags/ssl/"/>
    
      <category term="ubuntu" scheme="http://www.cmlanche.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>图文详解如何修改git已提交记录的邮箱？</title>
    <link href="http://www.cmlanche.com/2019/05/13/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9git%E5%B7%B2%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%E7%9A%84%E9%82%AE%E7%AE%B1%EF%BC%9F/"/>
    <id>http://www.cmlanche.com/2019/05/13/如何修改git已提交记录的邮箱？/</id>
    <published>2019-05-13T03:26:12.000Z</published>
    <updated>2019-05-13T04:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，公司提交的代码必须使用公司邮箱，而你误操作，直接把自己个人邮箱提交上去了，此时你就会遇到这样的需求：如何修改git已提交的邮箱？</p><p>而这个需求对于新手来说，往往要花费半天的时间才能理解修改过程，简直太傻比了，所以我这里做一个详细的文档来帮助自己和你搞清楚这个流程。尤其要理解变基，它不是一个命令执行就完成了，而是一连串命令的组合。</p><a id="more"></a><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i</span><br></pre></td></tr></table></figure><p>执行后，会打开最近一条的提交记录，当然上面的命令可以指定某一条记录，命令是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i &quot;your commit id&quot;</span><br></pre></td></tr></table></figure><p>对于sourcetree用户来说，commit id是SHA-1，可以右键某条提交记录，选择菜单”复制SHA-1到剪贴板”，如下图：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/mfl1f.png" alt="image-20190513113342522"></p><p>变基rebase命令执行完成后，会打印<strong>类似</strong>如下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pick bd81df5 更新API</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Rebase abcb9d0..bd81df5 onto abcb9d0 (1 command)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Commands:</span><br><span class="line"><span class="meta">#</span> p, pick = use commit</span><br><span class="line"><span class="meta">#</span> r, reword = use commit, but edit the commit message</span><br><span class="line"><span class="meta">#</span> e, edit = use commit, but stop for amending</span><br><span class="line"><span class="meta">#</span> s, squash = use commit, but meld into previous commit</span><br><span class="line"><span class="meta">#</span> f, fixup = like "squash", but discard this commit's log message</span><br><span class="line"><span class="meta">#</span> x, exec = run command (the rest of the line) using shell</span><br><span class="line"><span class="meta">#</span> d, drop = remove commit</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> However, if you remove everything, the rebase will be aborted.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>新手往往会一脸懵逼，不止所错，此时是在rebase的过程中，你需要把pick改为edit，如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">edit bd81df5 更新API</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Rebase abcb9d0..bd81df5 onto abcb9d0 (1 command)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Commands:</span><br><span class="line"><span class="meta">#</span> p, pick = use commit</span><br><span class="line"><span class="meta">#</span> r, reword = use commit, but edit the commit message</span><br><span class="line"><span class="meta">#</span> e, edit = use commit, but stop for amending</span><br><span class="line"><span class="meta">#</span> s, squash = use commit, but meld into previous commit</span><br><span class="line"><span class="meta">#</span> f, fixup = like "squash", but discard this commit's log message</span><br><span class="line"><span class="meta">#</span> x, exec = run command (the rest of the line) using shell</span><br><span class="line"><span class="meta">#</span> d, drop = remove commit</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> However, if you remove everything, the rebase will be aborted.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>更改完成后，保存并退出vi编辑器：<code>:wq</code></p><p>然后会打印这样的消息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdeMacBook-Pro:server cmlanche$ git rebase -i "abcb9d0d1e99cdad25d8d08119e494436b000e59"</span><br><span class="line">Stopped at bd81df5...  更新API</span><br><span class="line">You can amend the commit now, with</span><br><span class="line"></span><br><span class="line">  git commit --amend </span><br><span class="line"></span><br><span class="line">Once you are satisfied with your changes, run</span><br><span class="line"></span><br><span class="line">  git rebase --continue</span><br><span class="line">chengmingdeMacBook-Pro:server cmlanche$</span><br></pre></td></tr></table></figure><p>给大家先科普一下这个<code>amend</code>英文单词，是修改的意思，对我来说好陌生，为啥不用change或者fix之类的。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/qgjur.png" alt="image-20190513114137949"></p><p>上面的信息说了，如果你要amend，也就是要修改这个提交的话，那么用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>如果你对这次修改满意的话，就用如下命令结束此次变基</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><h3 id="重置账户邮箱信息"><a href="#重置账户邮箱信息" class="headerlink" title="重置账户邮箱信息"></a>重置账户邮箱信息</h3><p>我们当然要修改啦，那么执行如下命令，重置提交的账户信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend --author="cmlanche &lt;1204833748@qq.com&gt;" --no-edit</span><br></pre></td></tr></table></figure><p>同事，要注意你的sourcetree，出现了新情况！</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/8w5dw.png" alt="image-20190513114851415"></p><p>我们可以看到一个新的提交，并且，邮箱账号都经过了修改，如果你去掉<code>--no-edit</code>还可以修改commit message，也就是图中的”更新API”，举栗子吧，我可以继续用amend修改此次变基</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend --author="cmlanche &lt;1204833748@qq.com&gt;"</span><br></pre></td></tr></table></figure><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/5500p.png" alt="image-20190513115132114"></p><p>保存退出vi编辑器，看sourcetree咋样了：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/e0x3u.png" alt="image-20190513115216969"></p><p>真的很完美，接下来就是合并了，退出变基。</p><h3 id="退出变基"><a href="#退出变基" class="headerlink" title="退出变基"></a>退出变基</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><p>在控制台中打印如上命令退出变基，我们看到退出变基也就是使用最新的修改了，就一条分支了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdeMacBook-Pro:server cmlanche$ git rebase --continue</span><br><span class="line">Successfully rebased and updated refs/heads/bulma.</span><br></pre></td></tr></table></figure><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/4e46r.png" alt="image-20190513115442779"></p><h3 id="最后总结一下"><a href="#最后总结一下" class="headerlink" title="最后总结一下"></a>最后总结一下</h3><p>变基真的很有用，他不是一条命令搞定的，是一个过程，就像变成中打开了一个输入流，最后用完你得关闭输入流一样。</p><p>通过变基你可以轻松实现提交信息的任意重新修改！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候，公司提交的代码必须使用公司邮箱，而你误操作，直接把自己个人邮箱提交上去了，此时你就会遇到这样的需求：如何修改git已提交的邮箱？&lt;/p&gt;
&lt;p&gt;而这个需求对于新手来说，往往要花费半天的时间才能理解修改过程，简直太傻比了，所以我这里做一个详细的文档来帮助自己和你搞清楚这个流程。尤其要理解变基，它不是一个命令执行就完成了，而是一连串命令的组合。&lt;/p&gt;
    
    </summary>
    
      <category term="日常技术" scheme="http://www.cmlanche.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://www.cmlanche.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>改造思寒的AppCrawler，使其支持Appium最新版本</title>
    <link href="http://www.cmlanche.com/2019/05/08/%E6%94%B9%E9%80%A0%E6%80%9D%E5%AF%92%E7%9A%84AppiumCrawler%EF%BC%8C%E4%BD%BF%E5%85%B6%E6%94%AF%E6%8C%81Appium%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/"/>
    <id>http://www.cmlanche.com/2019/05/08/改造思寒的AppiumCrawler，使其支持Appium最新版本/</id>
    <published>2019-05-08T03:19:06.000Z</published>
    <updated>2019-05-08T05:01:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思绪"><a href="#思绪" class="headerlink" title="思绪"></a>思绪</h3><p>最近完成了自定义Appium的需求，让Appium内置了自动识别权限框并点击的能力，参考我的知乎专栏：<a href="https://zhuanlan.zhihu.com/custom-appium" target="_blank" rel="noopener">自定义Appium之路</a></p><p>但遇到另外一个问题，就是testerhome思寒开发的AppiumCrawler并不支持Appium最新版，也就是当前的1.12版本，只支持到1.8版本，让人很是捉急。</p><p>本来是想基于1.8重新自定义一个appium，但是发现这个appium实在太老了，下载下来编译都有各种问题，况且后续还要自定义appium-android-driver，appium-uiautomator2-driver和appium-uiaumator2-server，工作量至少得3天，太费时间。</p><p>索性，我来替思寒把AppCrawler来升级一下，让它支持最新appium。</p><p>刚开始觉得挺难的，毕竟我对scala只略知一二，编译打包方面还要学，但事后发现，这个工程做的确实不错，升级改造过程比预计的要简单很多，这里要给思寒大佬一个赞👍！</p><a id="more"></a><h3 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h3><h4 id="先看看出了什么问题？"><a href="#先看看出了什么问题？" class="headerlink" title="先看看出了什么问题？"></a>先看看出了什么问题？</h4><p>我开启最新的appium：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appium</span><br></pre></td></tr></table></figure><p>执行appcrawler测试：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar appcrawler-2.1.3.jar -a ApiDemos-debug.apk</span><br></pre></td></tr></table></figure><p>执行过程中在appium和appcrawler两端都报错：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">[HTTP] &lt;-- GET /wd/hub/session/efdf97d8-cf46-<span class="number">4</span>ffb-b2d4-<span class="number">7</span>d8feb931cee/window/rect <span class="number">200</span> <span class="number">7</span> ms - <span class="number">50</span></span><br><span class="line">[HTTP] </span><br><span class="line">[HTTP] --&gt; POST /wd/hub/session/efdf97d8-cf46-<span class="number">4</span>ffb-b2d4-<span class="number">7</span>d8feb931cee/execute/sync</span><br><span class="line">[HTTP] &#123;<span class="string">"script"</span>:<span class="string">"var source = document.documentElement.outerHTML; \nif (!source) &#123; source = new XMLSerializer().serializeToString(document); &#125;\nreturn source;"</span>,<span class="string">"args"</span>:[]&#125;</span><br><span class="line">[debug] [W3C (efdf97d8)] Calling AppiumDriver<span class="variable">.execute</span>() <span class="keyword">with</span> args: [<span class="string">"var source = document.documentElement.outerHTML; \nif (!source) &#123; source = new XMLSerializer().serializeToString(document); &#125;\nreturn source;"</span>,[],<span class="string">"efdf97d8-cf46-4ffb-b2d4-7d8feb931cee"</span>]</span><br><span class="line">[debug] [W3C (efdf97d8)] Encountered internal error running command: NotImplementedError: Method is <span class="keyword">not</span> implemented</span><br><span class="line">[debug] [W3C (efdf97d8)]     at AndroidDriver<span class="variable">.extensions</span><span class="variable">.execute</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-android-driver/lib/commands/execute<span class="variable">.js</span>:<span class="number">12</span>:<span class="number">9</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at curCommandCancellable<span class="variable">._bluebird</span><span class="variable">.default</span><span class="variable">.resolve</span><span class="variable">.then</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/driver<span class="variable">.js</span>:<span class="number">291</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at tryCatcher (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/util<span class="variable">.js</span>:<span class="number">26</span>:<span class="number">23</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseFromHandler</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">510</span>:<span class="number">31</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseAt</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">584</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseAtPostResolution</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">248</span>:<span class="number">10</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Async<span class="variable">._drainQueue</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">128</span>:<span class="number">12</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Async<span class="variable">._drainQueues</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">133</span>:<span class="number">10</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Immediate<span class="variable">.Async</span><span class="variable">.drainQueues</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">15</span>:<span class="number">14</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at runCallback (timers<span class="variable">.js</span>:<span class="number">705</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at tryOnImmediate (timers<span class="variable">.js</span>:<span class="number">676</span>:<span class="number">5</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at processImmediate (timers<span class="variable">.js</span>:<span class="number">658</span>:<span class="number">5</span>)</span><br><span class="line">[HTTP] &lt;-- POST /wd/hub/session/efdf97d8-cf46-<span class="number">4</span>ffb-b2d4-<span class="number">7</span>d8feb931cee/execute/sync <span class="number">405</span> <span class="number">11</span> ms - <span class="number">1600</span></span><br><span class="line">[HTTP] </span><br><span class="line">[HTTP] --&gt; POST /wd/hub/session/efdf97d8-cf46-<span class="number">4</span>ffb-b2d4-<span class="number">7</span>d8feb931cee/execute/sync</span><br><span class="line">[HTTP] &#123;<span class="string">"script"</span>:<span class="string">"var source = document.documentElement.outerHTML; \nif (!source) &#123; source = new XMLSerializer().serializeToString(document); &#125;\nreturn source;"</span>,<span class="string">"args"</span>:[]&#125;</span><br><span class="line">[debug] [W3C (efdf97d8)] Calling AppiumDriver<span class="variable">.execute</span>() <span class="keyword">with</span> args: [<span class="string">"var source = document.documentElement.outerHTML; \nif (!source) &#123; source = new XMLSerializer().serializeToString(document); &#125;\nreturn source;"</span>,[],<span class="string">"efdf97d8-cf46-4ffb-b2d4-7d8feb931cee"</span>]</span><br><span class="line">[debug] [W3C (efdf97d8)] Encountered internal error running command: NotImplementedError: Method is <span class="keyword">not</span> implemented</span><br><span class="line">[debug] [W3C (efdf97d8)]     at AndroidDriver<span class="variable">.extensions</span><span class="variable">.execute</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-android-driver/lib/commands/execute<span class="variable">.js</span>:<span class="number">12</span>:<span class="number">9</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at curCommandCancellable<span class="variable">._bluebird</span><span class="variable">.default</span><span class="variable">.resolve</span><span class="variable">.then</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/driver<span class="variable">.js</span>:<span class="number">291</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at tryCatcher (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/util<span class="variable">.js</span>:<span class="number">26</span>:<span class="number">23</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseFromHandler</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">510</span>:<span class="number">31</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseAt</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">584</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseAtPostResolution</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">248</span>:<span class="number">10</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Async<span class="variable">._drainQueue</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">128</span>:<span class="number">12</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Async<span class="variable">._drainQueues</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">133</span>:<span class="number">10</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Immediate<span class="variable">.Async</span><span class="variable">.drainQueues</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">15</span>:<span class="number">14</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at runCallback (timers<span class="variable">.js</span>:<span class="number">705</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at tryOnImmediate (timers<span class="variable">.js</span>:<span class="number">676</span>:<span class="number">5</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at processImmediate (timers<span class="variable">.js</span>:<span class="number">658</span>:<span class="number">5</span>)</span><br><span class="line">[HTTP] &lt;-- POST /wd/hub/session/efdf97d8-cf46-<span class="number">4</span>ffb-b2d4-<span class="number">7</span>d8feb931cee/execute/sync <span class="number">405</span> <span class="number">4</span> ms - <span class="number">1600</span></span><br><span class="line">[HTTP] </span><br><span class="line">[HTTP] --&gt; POST /wd/hub/session/efdf97d8-cf46-<span class="number">4</span>ffb-b2d4-<span class="number">7</span>d8feb931cee/execute/sync</span><br><span class="line">[HTTP] &#123;<span class="string">"script"</span>:<span class="string">"var source = document.documentElement.outerHTML; \nif (!source) &#123; source = new XMLSerializer().serializeToString(document); &#125;\nreturn source;"</span>,<span class="string">"args"</span>:[]&#125;</span><br><span class="line">[debug] [W3C (efdf97d8)] Calling AppiumDriver<span class="variable">.execute</span>() <span class="keyword">with</span> args: [<span class="string">"var source = document.documentElement.outerHTML; \nif (!source) &#123; source = new XMLSerializer().serializeToString(document); &#125;\nreturn source;"</span>,[],<span class="string">"efdf97d8-cf46-4ffb-b2d4-7d8feb931cee"</span>]</span><br><span class="line">[debug] [W3C (efdf97d8)] Encountered internal error running command: NotImplementedError: Method is <span class="keyword">not</span> implemented</span><br><span class="line">[debug] [W3C (efdf97d8)]     at AndroidDriver<span class="variable">.extensions</span><span class="variable">.execute</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-android-driver/lib/commands/execute<span class="variable">.js</span>:<span class="number">12</span>:<span class="number">9</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at curCommandCancellable<span class="variable">._bluebird</span><span class="variable">.default</span><span class="variable">.resolve</span><span class="variable">.then</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/driver<span class="variable">.js</span>:<span class="number">291</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at tryCatcher (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/util<span class="variable">.js</span>:<span class="number">26</span>:<span class="number">23</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseFromHandler</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">510</span>:<span class="number">31</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseAt</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">584</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Promise<span class="variable">._settlePromiseAtPostResolution</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/promise<span class="variable">.js</span>:<span class="number">248</span>:<span class="number">10</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Async<span class="variable">._drainQueue</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">128</span>:<span class="number">12</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Async<span class="variable">._drainQueues</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">133</span>:<span class="number">10</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at Immediate<span class="variable">.Async</span><span class="variable">.drainQueues</span> (/usr/<span class="keyword">local</span>/lib/node_modules/appium/node_modules/appium-base-driver/node_modules/bluebird/js/main/async<span class="variable">.js</span>:<span class="number">15</span>:<span class="number">14</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at runCallback (timers<span class="variable">.js</span>:<span class="number">705</span>:<span class="number">18</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at tryOnImmediate (timers<span class="variable">.js</span>:<span class="number">676</span>:<span class="number">5</span>)</span><br><span class="line">[debug] [W3C (efdf97d8)]     at processImmediate (timers<span class="variable">.js</span>:<span class="number">658</span>:<span class="number">5</span>)</span><br><span class="line">[HTTP] &lt;-- POST /wd/hub/session/efdf97d8-cf46-<span class="number">4</span>ffb-b2d4-<span class="number">7</span>d8feb931cee/execute/sync <span class="number">405</span> <span class="number">9</span> ms - <span class="number">1600</span></span><br><span class="line">[HTTP]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> WARN [AppiumClient.$anonfun$getPageSource$<span class="number">1.340</span>] get page source error</span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> WARN [Crawler.refreshPage.562] page source get fail, go back</span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.setElementAction.660] set action to back</span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.runStartupScript.236] first refresh</span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.976] current element = _startupActions-Start-<span class="number">0</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.977] current index = <span class="number">0</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.978] current action = </span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.979] current url = </span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.980] current xpath = startupActions-Start-<span class="number">0</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.981] current tag path = _startupActions-Start-<span class="number">0</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.982] current file name = _</span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">01</span> INFO [Crawler.doElementAction.983] current uri = startupActions-Start-<span class="number">0</span>startupActions</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.util.NoSuchElementException: last of empty ListBuffer</span><br><span class="line">at scala.collection.mutable.ListBuffer.last(ListBuffer.scala:<span class="number">401</span>)</span><br><span class="line">at com.testerhome.appcrawler.DataRecord.last(DataRecord.scala:<span class="number">40</span>)</span><br><span class="line">at com.testerhome.appcrawler.Crawler.doElementAction(Crawler.scala:<span class="number">985</span>)</span><br><span class="line">at com.testerhome.appcrawler.Crawler.runStartupScript(Crawler.scala:<span class="number">238</span>)</span><br><span class="line">at com.testerhome.appcrawler.Crawler.start(Crawler.scala:<span class="number">152</span>)</span><br><span class="line">at com.testerhome.appcrawler.AppCrawler$.startCrawl(AppCrawler.scala:<span class="number">344</span>)</span><br><span class="line">at com.testerhome.appcrawler.AppCrawler$.parseParams(AppCrawler.scala:<span class="number">312</span>)</span><br><span class="line">at com.testerhome.appcrawler.AppCrawler$.main(AppCrawler.scala:<span class="number">92</span>)</span><br><span class="line">at com.testerhome.appcrawler.AppCrawler.main(AppCrawler.scala)</span><br></pre></td></tr></table></figure><h4 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h4><p>我们看到Appcrawler中报了个<code>get page source error</code>，我们追查appcrawler的代码发现是在这里报错的：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPageSource</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">    currentPageSource=<span class="literal">null</span></span><br><span class="line">    currentPageDom=<span class="literal">null</span></span><br><span class="line">    log.info(<span class="string">"start to get page source from appium"</span>)</span><br><span class="line">    <span class="comment">//获取页面结构, 最多重试3次</span></span><br><span class="line">    <span class="number">1</span> to <span class="number">3</span> foreach (i =&gt; &#123;</span><br><span class="line">      asyncTask(<span class="number">20</span>)(driver.getPageSource) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Some</span>(v) =&gt; &#123;</span><br><span class="line">          log.trace(<span class="string">"get page source success"</span>)</span><br><span class="line">          <span class="comment">//todo: wda返回的不是标准的xml</span></span><br><span class="line">          <span class="keyword">val</span> xmlStr=v <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> json <span class="keyword">if</span> json.trim.charAt(<span class="number">0</span>)=='&#123;' =&gt; &#123;</span><br><span class="line">              log.info(<span class="string">"json format maybe from wda"</span>)</span><br><span class="line">              <span class="type">DataObject</span>.fromJson[<span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]](v).getOrElse(<span class="string">"value"</span>, <span class="string">""</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> xml <span class="keyword">if</span> xml.trim.charAt(<span class="number">0</span>)=='&lt;' =&gt;&#123;</span><br><span class="line">              log.info(<span class="string">"xml format "</span>)</span><br><span class="line">              xml</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="type">Try</span>(<span class="type">XPathUtil</span>.toDocument(xmlStr)) <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Success</span>(v) =&gt; &#123;</span><br><span class="line">              currentPageDom = v</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Failure</span>(e) =&gt; &#123;</span><br><span class="line">              log.warn(<span class="string">"convert to xml fail"</span>)</span><br><span class="line">              log.warn(xmlStr)</span><br><span class="line">              currentPageDom=<span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          currentPageSource = <span class="type">XPathUtil</span>.toPrettyXML(xmlStr)</span><br><span class="line">          <span class="keyword">return</span> currentPageSource</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">None</span> =&gt; &#123;</span><br><span class="line">          log.warn(<span class="string">"get page source error"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    currentPageSource</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们看appium的源码，发现在appcrawler给我们的appium传递了一段js代码来获取控件树</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"script"</span>:<span class="string">"var source = document.documentElement.outerHTML; \nif (!source) &#123; source = new XMLSerializer().serializeToString(document); &#125;\nreturn source;"</span>,<span class="attr">"args"</span>:[]&#125;</span><br></pre></td></tr></table></figure><p>然而，我们的appium代码对get page source这个功能接口做了限制，源码在<code>appium-android-driver</code>中的lib/execute.js中：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">extensions.execute = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span> (<span class="params">script, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (script.match(<span class="regexp">/^mobile:/</span>)) &#123;</span><br><span class="line">    script = script.replace(<span class="regexp">/^mobile:/</span>, <span class="string">''</span>).trim();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">this</span>.executeMobile(script, _.isArray(args) ? args[<span class="number">0</span>] : args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> errors.NotImplementedError();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以看到，这里抛出异常了，说明可能是接口变动了，那么我这里有个大胆猜想，appcrawler所使用的java-client过老。</p><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>ok，立马开始行动，替换上最新的java-client，也就是7.0，同时我们使用最新的appcrawler2.4.0</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.appium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>v7.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时添加对应的仓库：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jitpack.io<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jitpack.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn assembly:assembly</span><br></pre></td></tr></table></figure><p>打包完成，会再target目录下生成一个完整依赖的jar包：<code>appcrawler-2.4.0-jar-with-dependencies.jar</code></p><p>重新执行，你会发现美妙的事情发生，最新appium完美支持！</p><h4 id="提出质疑"><a href="#提出质疑" class="headerlink" title="提出质疑"></a>提出质疑</h4><p>上面的完美支持，是不是因为我更新了最新版本2.4.0，而不是使用的最开始的2.1.3版本呢？</p><p>有可能！！！</p><p>撤销修改，直接打包2.4.0，执行测试看是否正常。</p><p>结果就是：最开始的get page source问题没了，但出现另外一个问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">55</span>:<span class="number">46</span> INFO [AppiumClient.30.initLog] already exist</span><br><span class="line">Exception in thread <span class="string">"main"</span> scala.MatchError: [app, appium, deviceName, dontStopAppOnReset, fullReset, noReset] (of <span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">Collections</span>$<span class="title">UnmodifiableSet</span>)</span></span><br><span class="line">        at com.testerhome.appcrawler.driver.AppiumClient.appium(AppiumClient.scala:94)</span><br><span class="line">        at com.testerhome.appcrawler.driver.AppiumClient.&lt;init&gt;(AppiumClient.scala:<span class="number">40</span>)</span><br><span class="line">        at com.testerhome.appcrawler.Crawler.setupAppium(Crawler.scala:<span class="number">277</span>)</span><br><span class="line">        at com.testerhome.appcrawler.Crawler.restart(Crawler.scala:<span class="number">221</span>)</span><br><span class="line">        at com.testerhome.appcrawler.Crawler.crawl(Crawler.scala:<span class="number">201</span>)</span><br><span class="line">        at com.testerhome.appcrawler.Crawler.start(Crawler.scala:<span class="number">170</span>)</span><br><span class="line">        at com.testerhome.appcrawler.AppCrawler$.startCrawl(AppCrawler.scala:<span class="number">323</span>)</span><br><span class="line">        at com.testerhome.appcrawler.AppCrawler$.parseParams(AppCrawler.scala:<span class="number">291</span>)</span><br><span class="line">        at com.testerhome.appcrawler.AppCrawler$.main(AppCrawler.scala:<span class="number">91</span>)</span><br><span class="line">        at com.testerhome.appcrawler.AppCrawler.main(AppCrawler.scala)</span><br><span class="line">chengmingdeMacBook-Pro:AppCrawler cmlanche$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[debug] [W3C (dd159942)] Encountered internal error running command: NoSuchDriverError: A session is either terminated or not started</span><br><span class="line">[debug] [W3C (dd159942)]     at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:298:15)</span><br><span class="line">[debug] [W3C (dd159942)]     at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:489:15)</span><br><span class="line">[debug] [W3C (dd159942)]     at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)</span><br><span class="line">[debug] [W3C (dd159942)]     at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/route.js:137:13)</span><br><span class="line">[debug] [W3C (dd159942)]     at Route.dispatch (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/route.js:112:3)</span><br><span class="line">[debug] [W3C (dd159942)]     at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)</span><br><span class="line">[debug] [W3C (dd159942)]     at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:281:22</span><br><span class="line">[debug] [W3C (dd159942)]     at param (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:354:14)</span><br><span class="line">[debug] [W3C (dd159942)]     at param (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:365:14)</span><br><span class="line">[debug] [W3C (dd159942)]     at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:410:3)</span><br><span class="line">[debug] [W3C (dd159942)]     at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:275:10)</span><br><span class="line">[debug] [W3C (dd159942)]     at logger (/usr/local/lib/node_modules/appium/node_modules/morgan/index.js:144:5)</span><br><span class="line">[debug] [W3C (dd159942)]     at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)</span><br><span class="line">[debug] [W3C (dd159942)]     at trim_prefix (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:317:13)</span><br><span class="line">[debug] [W3C (dd159942)]     at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:284:7</span><br><span class="line">[debug] [W3C (dd159942)]     at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)</span><br><span class="line">[debug] [W3C (dd159942)]     at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:275:10)</span><br><span class="line">[debug] [W3C (dd159942)]     at jsonParser (/usr/local/lib/node_modules/appium/node_modules/body-parser/lib/types/json.js:110:7)</span><br><span class="line">[debug] [W3C (dd159942)]     at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)</span><br><span class="line">[debug] [W3C (dd159942)]     at trim_prefix (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:317:13)</span><br><span class="line">[debug] [W3C (dd159942)]     at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:284:7</span><br><span class="line">[debug] [W3C (dd159942)]     at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)</span><br><span class="line">[debug] [W3C (dd159942)]     at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:275:10)</span><br><span class="line">[debug] [W3C (dd159942)]     at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:91:12)</span><br><span class="line">[debug] [W3C (dd159942)]     at trim_prefix (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:317:13)</span><br><span class="line">[debug] [W3C (dd159942)]     at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:284:7</span><br><span class="line">[debug] [W3C (dd159942)]     at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)</span><br><span class="line">[debug] [W3C (dd159942)]     at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:275:10)</span><br><span class="line">[HTTP] &lt;-- GET /wd/hub/session/dd159942-ed6d-411c-8dcc-b43d7fc26284/source 404 5 ms - 3173</span><br></pre></td></tr></table></figure><p>还是错的！</p><p>那就用我的最新java-client 7.0吧，重新执行一次完整的测试，发现没有任何问题！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;思绪&quot;&gt;&lt;a href=&quot;#思绪&quot; class=&quot;headerlink&quot; title=&quot;思绪&quot;&gt;&lt;/a&gt;思绪&lt;/h3&gt;&lt;p&gt;最近完成了自定义Appium的需求，让Appium内置了自动识别权限框并点击的能力，参考我的知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/custom-appium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义Appium之路&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但遇到另外一个问题，就是testerhome思寒开发的AppiumCrawler并不支持Appium最新版，也就是当前的1.12版本，只支持到1.8版本，让人很是捉急。&lt;/p&gt;
&lt;p&gt;本来是想基于1.8重新自定义一个appium，但是发现这个appium实在太老了，下载下来编译都有各种问题，况且后续还要自定义appium-android-driver，appium-uiautomator2-driver和appium-uiaumator2-server，工作量至少得3天，太费时间。&lt;/p&gt;
&lt;p&gt;索性，我来替思寒把AppCrawler来升级一下，让它支持最新appium。&lt;/p&gt;
&lt;p&gt;刚开始觉得挺难的，毕竟我对scala只略知一二，编译打包方面还要学，但事后发现，这个工程做的确实不错，升级改造过程比预计的要简单很多，这里要给思寒大佬一个赞👍！&lt;/p&gt;
    
    </summary>
    
      <category term="Appium" scheme="http://www.cmlanche.com/categories/Appium/"/>
    
    
      <category term="appium" scheme="http://www.cmlanche.com/tags/appium/"/>
    
      <category term="appiumcrawler" scheme="http://www.cmlanche.com/tags/appiumcrawler/"/>
    
  </entry>
  
  <entry>
    <title>开源项目filepond的独立自由之路：城市套路深</title>
    <link href="http://www.cmlanche.com/2019/04/20/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AEfilepond%E7%9A%84%E7%8B%AC%E7%AB%8B%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF%EF%BC%9A%E5%9F%8E%E5%B8%82%E5%A5%97%E8%B7%AF%E6%B7%B1/"/>
    <id>http://www.cmlanche.com/2019/04/20/开源项目filepond的独立自由之路：城市套路深/</id>
    <published>2019-04-20T01:19:41.000Z</published>
    <updated>2019-05-08T05:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信原文更清晰：<a href="https://mp.weixin.qq.com/s/dv39XvvDNlDqvSgrhN2f7A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dv39XvvDNlDqvSgrhN2f7A</a></p><p>最近一直在做一个有关独立开发者友链联盟的插件项目，在做到上传头像时，满网络找最好的头像上传、剪裁插件，最后终于找到了<a href="https://github.com/pqina/filepond" target="_blank" rel="noopener">filepond</a>，满心欢喜的认为，这么好的东西居然是开源项目，简直牛的不要不要的。</p><a id="more"></a><p>这个filepond到底怎么好呢？给大家看俩图，或许能了解，她如此美丽简洁，真漂亮！</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/yeua9.gif" alt="filepond1"></p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/nuf1l.gif" alt="filepond2"></p><p>看到效果，是不是很激动？是不是特别想要？</p><p>想必肯定是了，我也是啊。</p><p>立马，我就开始准备继承她了。。。</p><p>集成中，才发现，filepond是一个设计也精美的插件，它由主filepond工程和几个不同功能的插件组成，你可以根据实际需求来添加插件，默认主工程可以直接使用，但只有基本的上传功能。插件如下：</p><ul><li><a href="https://github.com/pqina/filepond-plugin-file-encode" target="_blank" rel="noopener">File encode</a></li><li><a href="https://github.com/pqina/filepond-plugin-file-rename" target="_blank" rel="noopener">File rename</a></li><li><a href="https://github.com/pqina/filepond-plugin-file-validate-size" target="_blank" rel="noopener">File size validation</a></li><li><a href="https://github.com/pqina/filepond-plugin-file-validate-type" target="_blank" rel="noopener">File type validation</a></li><li><a href="https://github.com/pqina/filepond-plugin-file-metadata" target="_blank" rel="noopener">File metadata</a></li><li><a href="https://github.com/pqina/filepond-plugin-file-poster" target="_blank" rel="noopener">File poster</a></li><li><a href="https://github.com/pqina/filepond-plugin-image-edit" target="_blank" rel="noopener">Image editor</a></li><li><a href="https://github.com/pqina/filepond-plugin-image-validate-size" target="_blank" rel="noopener">Image size validation</a></li><li><a href="https://github.com/pqina/filepond-plugin-image-preview" target="_blank" rel="noopener">Image preview</a></li><li><a href="https://github.com/pqina/filepond-plugin-image-crop" target="_blank" rel="noopener">Image crop</a></li><li><a href="https://github.com/pqina/filepond-plugin-image-resize" target="_blank" rel="noopener">Image resize</a></li><li><a href="https://github.com/pqina/filepond-plugin-image-transform" target="_blank" rel="noopener">Image transform</a></li><li><a href="https://github.com/pqina/filepond-plugin-image-exif-orientation" target="_blank" rel="noopener">Image EXIF orientation</a></li></ul><p>并且作者pqina还适配了不同的前端框架：</p><ul><li><a href="https://github.com/pqina/react-filepond" target="_blank" rel="noopener">React</a></li><li><a href="https://github.com/pqina/vue-filepond" target="_blank" rel="noopener">Vue</a></li><li><a href="https://github.com/pqina/jquery-filepond" target="_blank" rel="noopener">jQuery</a></li><li><a href="https://github.com/pqina/ngx-filepond" target="_blank" rel="noopener">Angular</a></li><li><a href="https://github.com/johnnyasantoss/angularjs-filepond" target="_blank" rel="noopener">Angular 1</a></li><li><a href="https://github.com/alexdiliberto/ember-filepond" target="_blank" rel="noopener">Ember</a></li></ul><p>真的可以说是用心良苦啊！不得不佩服。</p><p>说这么多，只是说它有多牛逼，还没说到独立开发者上来，这个也是我集成filepond的图片编辑功能之后才了解到的，也就是上面中第二章图展示的功能。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/xcvfb.png" alt="image-20190420094415203"></p><p>我擦，我好不容易把7个插件的js、css引入进来，结果还有个一Doka的东西！！这是什么鬼啊？？？</p><p>刚开始还以为是另外一个项目没引入，赶紧去filepond的README中找。。。最后找到这样几句话：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/dv973.png" alt="image-20190420094620708"></p><p>打开Doka一看，原来TM是个收费项目啊，最牛逼最亮点的东西居然收费，我TM。。。。。服了，后来一转想，人家东西做的这么好，独立开发如此不容易，收个费怎么了，想到这，我就特想买了。</p><p>不过，人家价格方案比较贵，最低一年要79美金，而且不适用于saas，所以它这个项目，一开始就把目标人群定位在了企业级的用户上，很明确。</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/7knhz.png" alt="image-20190420095123231"></p><p>我是买不起你了，要是以后独立开发者友链联盟这个项目能做起来，做大了，我肯定买！</p><p>自此，我是深感套路深啊，但就算套路深，我却很喜欢这种感觉，毕竟人家很挣钱。</p><p>继续了解下背后的作者pqina吧，个人网站是：<a href="https://pqina.nl/" target="_blank" rel="noopener">pqina.nl</a>，个人网站上没有写任何有关自己的事情，基本都是自己的几个关键的独立产品，FilePond、Doka、Flip和Soon，但是公布的推特，当发现你很崇拜一个人的时候，你就特别想了解他的一切，那就fq去推特看看吧。</p><p>推特上显示他来自荷兰(Netherlands)，主要给WordPress、jQuery、React、Angular设计高质量的Web插件，并在推特上发布有趣的web相关的新闻。</p><p><strong>信息就这点，现在来复盘一下filepond的盈利模式。</strong></p><ol><li>创建开源项目filepond，开源绝大部分基础功能</li><li>在更高层次的图片编辑功能上做限制，开发出Doke.js的付费项目</li><li>filepond负责引流，filepond提供了很好的插件模式，虽然你也可能开发出类似的插件，但终究门槛太高，基本上如果你要图片编辑功能，那你是必须购买Doka.js的</li></ol><p>但，就是因为pgina把这块的功能做的足够好，并且市面上并没有比他更好的，所以才有这么大的自信做收费，还不便宜。</p><p><strong>对我们独立开发者的反思：</strong></p><ol><li>有时候我们并不需要做太多产品，做一款产品做到极致那抵得过”千军万马”</li><li>开源基础功能，高纬度功能收费，定价合理，这种盈利模式，独立开发者可以考虑一下</li><li>好的有价值的产品，能够做到自我传播，就像filepond一样，让我使劲夸它，要是一个烂东西，看都懒得看。所以独立开发者做的东西，一定要有很高的价值才行，一定不要敷衍你的用户！</li></ol><p>还有一点要分享就是关于谷歌搜索引擎，它的目标是让你找到对你最有价值的东西，只要你的东西做的够好，总会把这种价值带给用户，就像我找filepond，所以谷歌SEO不仅仅是字面的意思，还是背后一个价值的意思。</p><p><strong>关注我的订阅号：</strong></p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/op5uf.jpg" alt="qrcode_for_gh_2af76fcad768_258"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信原文更清晰：&lt;a href=&quot;https://mp.weixin.qq.com/s/dv39XvvDNlDqvSgrhN2f7A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/dv39XvvDNlDqvSgrhN2f7A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近一直在做一个有关独立开发者友链联盟的插件项目，在做到上传头像时，满网络找最好的头像上传、剪裁插件，最后终于找到了&lt;a href=&quot;https://github.com/pqina/filepond&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;filepond&lt;/a&gt;，满心欢喜的认为，这么好的东西居然是开源项目，简直牛的不要不要的。&lt;/p&gt;
    
    </summary>
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/categories/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
      <category term="filepond" scheme="http://www.cmlanche.com/tags/filepond/"/>
    
  </entry>
  
  <entry>
    <title>centos7开放端口命令</title>
    <link href="http://www.cmlanche.com/2019/04/19/centos7%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.cmlanche.com/2019/04/19/centos7开放端口命令/</id>
    <published>2019-04-19T09:22:36.000Z</published>
    <updated>2019-05-14T08:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>亲测有效！</p><h3 id="centos查询端口是不是开放的"><a href="#centos查询端口是不是开放的" class="headerlink" title="centos查询端口是不是开放的"></a>centos查询端口是不是开放的</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --query-port=8080/tcp</span><br></pre></td></tr></table></figure><h3 id="添加对外开放端口"><a href="#添加对外开放端口" class="headerlink" title="添加对外开放端口"></a>添加对外开放端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=8080/tcp</span><br></pre></td></tr></table></figure><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;亲测有效！&lt;/p&gt;
&lt;h3 id=&quot;centos查询端口是不是开放的&quot;&gt;&lt;a href=&quot;#centos查询端口是不是开放的&quot; class=&quot;headerlink&quot; title=&quot;centos查询端口是不是开放的&quot;&gt;&lt;/a&gt;centos查询端口是不是开放的&lt;/h3&gt;&lt;fig
      
    
    </summary>
    
      <category term="日常技术" scheme="http://www.cmlanche.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="centos7" scheme="http://www.cmlanche.com/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>健康才是福，工作和生活的心态要平衡</title>
    <link href="http://www.cmlanche.com/2019/04/14/%E5%81%A5%E5%BA%B7%E6%89%8D%E6%98%AF%E7%A6%8F%EF%BC%8C%E5%B7%A5%E4%BD%9C%E5%92%8C%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%83%E6%80%81%E8%A6%81%E5%B9%B3%E8%A1%A1/"/>
    <id>http://www.cmlanche.com/2019/04/14/健康才是福，工作和生活的心态要平衡/</id>
    <published>2019-04-14T13:02:44.000Z</published>
    <updated>2019-04-15T06:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天一早8点，肾结石突发，疼死我了，急忙跑到医院打针吃药，下午终于有点好转，感谢生命！但是基本上一坐下来就疼，只能站着。</p><a id="more"></a><p>可能很多人都有结石，体验结石带来的痛苦也有不少吧，那种疼痛感，很容易让人产生悲观厌世的感觉，终于不那么疼了，才想到，原来此前的每一刻那坐下来的舒适，都是幸福！</p><p>但是幸福如此在你身边，你却不以为意，感觉有无数的欲望和野心在等着你完成，马云说，能够996是种幸福，我说健康才是福，现在的每一刻每一秒都是幸福，工作是工作，生活是生活，都要有，而且要有滋有味，不要总是忙忙碌碌，不知所终。有野心没问题，但是切忌急躁，慢慢来。</p><p>工作和生活的心态要平衡，其实现在就是幸福，可以想太多，但不可以着急，不要给自己太大的压力。</p><p>鉴于结石的情况，给自己立几个规矩：</p><ol><li>晚上11点之前睡觉</li><li>少吃豆制品，少吃鸡蛋，多吃蔬菜</li><li>多喝水，多运动</li></ol><p>此文，你我诸君共勉！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天一早8点，肾结石突发，疼死我了，急忙跑到医院打针吃药，下午终于有点好转，感谢生命！但是基本上一坐下来就疼，只能站着。&lt;/p&gt;
    
    </summary>
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/categories/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="生活" scheme="http://www.cmlanche.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>gradle构建appium-uiautomator2-server出现gradle版本不匹配</title>
    <link href="http://www.cmlanche.com/2019/04/12/gradle%E6%9E%84%E5%BB%BAappium-uiautomator2-server%E5%87%BA%E7%8E%B0gradle%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D/"/>
    <id>http://www.cmlanche.com/2019/04/12/gradle构建appium-uiautomator2-server出现gradle版本不匹配/</id>
    <published>2019-04-12T04:31:31.000Z</published>
    <updated>2019-04-15T06:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在克隆代码：<a href="https://github.com/appium/appium-uiautomator2-server" target="_blank" rel="noopener">appium-uiautomator2-server</a>后，按照说明文档README.md中所说，进行构建</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gradle clean assembleE2ETestDebug assembleE2ETestDebugAndroidTest</span><br></pre></td></tr></table></figure><a id="more"></a><p>出现错误：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* Where:</span><br><span class="line">Build file '/Users/cmlanche/sourcetree/appium/appium-uiautomator2-server/app/build.gradle' line: 14</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred evaluating project ':app'.</span><br><span class="line"><span class="meta">&gt;</span> Failed to apply plugin [id 'com.android.application']</span><br><span class="line"><span class="meta">   &gt;</span> Minimum supported Gradle version is 4.10.1. Current version is 4.1. If using the gradle wrapper, try editing the distributionUrl in /Users/cmlanche/sourcetree/appium/appium-uiautomator2-server/gradle/wrapper/gradle-wrapper.properties to gradle-4.10.1-all.zip</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</span><br><span class="line"></span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line"></span><br><span class="line">BUILD FAILED in 1s</span><br></pre></td></tr></table></figure><p>错误中说，当前工程最低要求的gradle版本是4.10.1，而当前的版本是4.1。</p><p>当时我并不知道，或者说已经忘记gradle是怎么安装的，索性做了两件事：</p><ol><li>使用<code>gradle -v</code>查询当前的版本号，确实显示的是4.1</li><li>使用brew upgrade gradle升级我的gradle，果不其然，我的gradle确实是用brew来管理的(各个系统不一样哈，我的是mac，不仅仅是可能操作系统的差异，也有可能是使用gradle也有差异，比如你可以用本地gradle来编译)</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdeMacBook-Pro:appium-uiautomator2-server cmlanche$ brew upgrade gradle</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 2 taps (dart-lang/dart and homebrew/core).</span><br><span class="line">==&gt; New Formulae</span><br><span class="line">aliyun-cli         breezy             embree             frpc               frps               lazygit            ospray             volt               zabbix-cli</span><br><span class="line">==&gt; Updated Formulae</span><br><span class="line">go ✔                               direnv                             grafana                            mariadb                            simple-scan</span><br><span class="line">hugo ✔                             dita-ot                            gromacs                            maxwell                            smimesign</span><br><span class="line">swagger-codegen ✔                  django-completion                  groonga                            mesa                               snapcraft</span><br><span class="line">wget ✔                             dnscrypt-proxy                     gsoap                              meson                              snort</span><br><span class="line">ace                                docfx                              gssdp                              metabase                           sourcekitten</span><br><span class="line">algernon                           docker                             gtk+3                              micronaut                          sshguard</span><br><span class="line">ansible                            docker-completion                  gupnp                              mmseqs2                            ssllabs-scan</span><br><span class="line">anyenv                             docker-compose-completion          gupnp-av                           mps-youtube                        step</span><br><span class="line">apache-arrow                       docker-credential-helper-ecr       gupnp-tools                        nginx                              streamlink</span><br><span class="line">apache-arrow-glib                  doctl                              hadolint                           nsd                                stunnel</span><br><span class="line">apache-flink                       doitlive                           haproxy                            opam                               svgo</span><br><span class="line">apache-spark                       dynare                             hatari                             open-mpi                           swiftformat</span><br><span class="line">apr                                easyengine                         helmfile                           openjpeg                           syncthing</span><br><span class="line">asciidoctor                        embulk                             ispc                               openttd                            taskell</span><br><span class="line">asdf                               erlang                             istioctl                           pacapt                             tbb</span><br><span class="line">atlassian-cli                      ethereum                           jemalloc                           paket                              telegraf</span><br><span class="line">atomist-cli                        exploitdb                          jenkins                            pandoc                             terraform_landscape</span><br><span class="line">aws-okta                           faas-cli                           jenkins-lts                        pegtl                              tgui</span><br><span class="line">aws-sdk-cpp                        ffmpeg                             jfrog-cli-go                       php                                tippecanoe</span><br><span class="line">awscli                             file-roller                        jmeter                             php-code-sniffer                   tmux</span><br><span class="line">azure-cli                          fn                                 juju                               php@7.1                            topgrade</span><br><span class="line">binaryen                           fonttools                          kafkacat                           php@7.2                            ttfautohint</span><br><span class="line">bitrise                            freetds                            kitchen-sync                       phpunit                            typescript</span><br><span class="line">cake                               futhark                            krakend                            planck                             unbound</span><br><span class="line">carthage                           fx                                 kube-aws                           pmd                                ungit</span><br><span class="line">certbot                            gdcm                               kubecfg                            postgis                            v8</span><br><span class="line">cfssl                              get_iplayer                        ledger                             pre-commit                         vala</span><br><span class="line">cgal                               gitbucket                          libcroco                           prometheus                         vert.x</span><br><span class="line">checkstyle                         gitlab-runner                      libdazzle                          prototool                          vim</span><br><span class="line">citus                              gjs                                libnotify                          pulumi                             vte3</span><br><span class="line">cmark                              glib-networking                    libphonenumber                     putty                              wine</span><br><span class="line">collector-sidecar                  gmic                               librealsense                       pyenv                              wireguard-go</span><br><span class="line">composer                           gmsh                               libsoup                            rakudo-star                        wireguard-tools</span><br><span class="line">conan                              gnu-getopt                         libvirt                            riff                               xmake</span><br><span class="line">confluent-oss                      gnumeric                           libxlsxwriter                      rke                                yle-dl</span><br><span class="line">conjure-up                         gnunet                             links                              rtv                                youtube-dl</span><br><span class="line">cpprestsdk                         gnutls                             lmod                               ruby-build                         zabbix</span><br><span class="line">crowdin                            gobject-introspection              logtalk                            ruby@2.4                           zig</span><br><span class="line">cryfs                              gocr                               lolcat                             sbcl                               zim</span><br><span class="line">dcos-cli                           godep                              lumo                               sdl</span><br><span class="line">dhall                              gomplate                           lxc                                serverless</span><br><span class="line">dhall-json                         goreleaser                         mackup                             ship</span><br><span class="line">==&gt; Deleted Formulae</span><br><span class="line">pdftoedn                                                                                ruby@2.3</span><br><span class="line"></span><br><span class="line">==&gt; Upgrading 1 outdated package:</span><br><span class="line">gradle 4.1 -&gt; 5.3.1</span><br><span class="line">==&gt; Upgrading gradle </span><br><span class="line">==&gt; Downloading https://services.gradle.org/distributions/gradle-5.3.1-all.zip</span><br><span class="line">==&gt; Downloading from https://downloads.gradle.org/distributions/gradle-5.3.1-all.zip</span><br><span class="line"><span class="meta">#</span>####################################################################### 100.0%</span><br><span class="line">🍺  /usr/local/Cellar/gradle/5.3.1: 13,686 files, 236.8MB, built in 1 minute</span><br><span class="line">Removing: /usr/local/Cellar/gradle/4.1... (169 files, 71.7MB)</span><br></pre></td></tr></table></figure><p>升级完后，就可以正常使用<code>gradle</code>命令来打包了:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdeMacBook-Pro:appium-uiautomator2-server cmlanche$ gradle clean</span><br><span class="line"></span><br><span class="line">Welcome to Gradle 5.3.1!</span><br><span class="line"></span><br><span class="line">Here are the highlights of this release:</span><br><span class="line"> - Feature variants AKA "optional dependencies"</span><br><span class="line"> - Type-safe accessors in Kotlin precompiled script plugins</span><br><span class="line"> - Gradle Module Metadata 1.0</span><br><span class="line"></span><br><span class="line">For more details see https://docs.gradle.org/5.3.1/release-notes.html</span><br><span class="line"></span><br><span class="line">Starting a Gradle Daemon (subsequent builds will be faster)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> Configure project :app</span><br><span class="line">NDK is missing a "platforms" directory.</span><br><span class="line">If you are using NDK, verify the ndk.dir is set to a valid NDK directory.  It is currently set to /Users/cmlanche/Library/Android/sdk/ndk-bundle.</span><br><span class="line">If you are not using NDK, unset the NDK variable from ANDROID_NDK_HOME or local.properties to remove this warning.</span><br><span class="line"></span><br><span class="line">WARNING: Configuration 'compile' is obsolete and has been replaced with 'implementation' and 'api'.</span><br><span class="line">It will be removed at the end of 2018. For more information see: http://d.android.com/r/tools/update-dependency-configurations.html</span><br><span class="line"></span><br><span class="line">Deprecated Gradle features were used in this build, making it incompatible with Gradle 6.0.</span><br><span class="line">Use '--warning-mode all' to show the individual deprecation warnings.</span><br><span class="line">See https://docs.gradle.org/5.3.1/userguide/command_line_interface.html#sec:command_line_warnings</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 1m 3s</span><br><span class="line">2 actionable tasks: 2 executed</span><br></pre></td></tr></table></figure><p>其实，并不是gradle这个版本不能用，而是对<code>appium-uiautomator2-server</code>这个工程不能拿用，因为gradle版本和谷歌的<code>com.android.tools.build:gradle</code>插件是有个对应关系的，这个server工程中使用的是3.3.2,其最小的gradle就是4.10.1，对应关系链接: <a href="https://developer.android.google.cn/studio/releases/gradle-plugin.html#updating-gradle" target="_blank" rel="noopener">https://developer.android.google.cn/studio/releases/gradle-plugin.html#updating-gradle</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在克隆代码：&lt;a href=&quot;https://github.com/appium/appium-uiautomator2-server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;appium-uiautomator2-server&lt;/a&gt;后，按照说明文档README.md中所说，进行构建&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gradle clean assembleE2ETestDebug assembleE2ETestDebugAndroidTest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Appium" scheme="http://www.cmlanche.com/categories/Appium/"/>
    
    
      <category term="appium" scheme="http://www.cmlanche.com/tags/appium/"/>
    
      <category term="uiautomator2" scheme="http://www.cmlanche.com/tags/uiautomator2/"/>
    
      <category term="appium-uiautomator2-server" scheme="http://www.cmlanche.com/tags/appium-uiautomator2-server/"/>
    
  </entry>
  
  <entry>
    <title>给Appium内置系统对话框自动处理 - appium-uiautomator2-driver篇</title>
    <link href="http://www.cmlanche.com/2019/04/11/%E7%BB%99Appium%E5%86%85%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86---appium-uiautomator2-driver%E7%AF%87/"/>
    <id>http://www.cmlanche.com/2019/04/11/给Appium内置系统对话框自动处理---appium-uiautomator2-driver篇/</id>
    <published>2019-04-11T09:02:20.000Z</published>
    <updated>2019-04-15T06:15:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎关注我的Appium知乎专栏：<a href="https://zhuanlan.zhihu.com/custom-appium" target="_blank" rel="noopener">自定义Appium之路</a></p><p>当appium脚本的uiautomationName设置为UiAutomator2时，就会启动appium-uiautomator2-driver这个driver来执行你的脚本测试，而它的系统对话框的处理跟UIAutomator1的就不一样了，更加复杂一点。</p><p>因为UIAutomator2是一个apk形式的，本身可以认为是一个应用，是需要安装的，所以在启动UIAutomator2之前，就会碰到系统对话框的问题，此时，我们需要借助UIAutomator1来做这件事。</p><a id="more"></a><h3 id="大体流程是："><a href="#大体流程是：" class="headerlink" title="大体流程是："></a>大体流程是：</h3><ol><li>启动UIAutomator1</li><li>用UIAutomator1来处理权限框</li><li>安装各种apk，包括UIAutomator2的apk</li><li>杀死UIAutomator1服务</li><li>启动UIAutomator2</li><li>使用UIAutomator2来监控界面，处理系统对话框</li></ol><h3 id="怎么做呢？"><a href="#怎么做呢？" class="headerlink" title="怎么做呢？"></a>怎么做呢？</h3><p>首先我们需要修改appium-uiautomator2-driver，因为原本的执行流程根本没有UIAutomator1的事情，我们需要把UIAutomator1引用进来：(appium-uiautomator2-driver/lib/driver.js)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; androidHelpers, androidCommands, SETTINGS_HELPER_PKG_ID, UiAutomator &#125; <span class="keyword">from</span> <span class="string">'appium-android-driver-cmext'</span>;</span><br></pre></td></tr></table></figure><p>上面代码中的UiAutomator是我新加的，但是在appium-android-driver中并没有导出UiAutomator的，我们需要给它导出来：(在appium-uiautomator2-driver/index.js)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> driver <span class="keyword">from</span> <span class="string">'./lib/driver'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> androidHelperIndex <span class="keyword">from</span> <span class="string">'./lib/android-helpers'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> commandIndex <span class="keyword">from</span> <span class="string">'./lib/commands/index'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> webview <span class="keyword">from</span> <span class="string">'./lib/webview-helpers'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> caps <span class="keyword">from</span> <span class="string">'./lib/desired-caps'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> uia <span class="keyword">from</span> <span class="string">'./lib/uiautomator'</span>;   <span class="comment">// 这是新增</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; AndroidDriver &#125; = driver;</span><br><span class="line"><span class="keyword">const</span> &#123; UiAutomator &#125; = uia; <span class="comment">// 这是新增</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">helpers</span>: webviewHelpers, NATIVE_WIN, WEBVIEW_WIN, WEBVIEW_BASE,</span><br><span class="line">        CHROMIUM_WIN &#125; = webview;</span><br><span class="line"><span class="keyword">const</span> &#123; commonCapConstraints &#125; = caps;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">commands</span>: androidCommands &#125; = commandIndex;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">helpers</span>: androidHelpers, SETTINGS_HELPER_PKG_ID &#125; = androidHelperIndex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AndroidDriver;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  androidHelpers, androidCommands, AndroidDriver, startServer,</span><br><span class="line">  commonCapConstraints, webviewHelpers, NATIVE_WIN, WEBVIEW_WIN,</span><br><span class="line">  WEBVIEW_BASE, CHROMIUM_WIN, SETTINGS_HELPER_PKG_ID, UiAutomator <span class="comment">// 这是新增</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>添加一个启动UIAutomator1服务的方法：(appium-uiautomator2-driver/lib/driver.js)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> startUiAutomator1Service () &#123;</span><br><span class="line">  <span class="keyword">const</span> rootDir = path.resolve(__dirname, <span class="string">'..'</span>, <span class="string">'..'</span>, <span class="string">'..'</span>, <span class="string">'appium-android-driver'</span>);</span><br><span class="line">  <span class="keyword">const</span> startDetector = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="regexp">/Appium Socket Server Ready/</span>.test(s); &#125;;</span><br><span class="line">  <span class="keyword">const</span> bootstrapJar = path.resolve(rootDir, <span class="string">'bootstrap'</span>, <span class="string">'bin'</span>, <span class="string">'AppiumBootstrap.jar'</span>);</span><br><span class="line">  <span class="keyword">this</span>.uiAutomator = <span class="keyword">new</span> UiAutomator(<span class="keyword">this</span>.adb);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.uiAutomator.start(</span><br><span class="line">    bootstrapJar, <span class="string">'io.appium.android.bootstrap.Bootstrap'</span>,</span><br><span class="line">    startDetector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这个driver.js没有导入path，我们还要导入path：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br></pre></td></tr></table></figure><p>然后我们找到<code>startUiAutomator2Session</code>方法，分别添加如下代码：</p><ol><li><p>启动UIAutomator1的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动UIAutomator2之前，先启动UIAutomator1服务来处理系统框</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.startUiAutomator1Service();</span><br></pre></td></tr></table></figure></li><li><p>kill UIAutomator1的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在启动UIAutomator2之前，要先杀死UIAutomator1服务，否则UIAutomator2无法启动</span></span><br><span class="line"><span class="comment">// 因为UIAutomator只允许同时存在一个</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.uiAutomator) &#123;</span><br><span class="line"><span class="keyword">this</span>.uiAutomator.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>位置如下图：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/awqkh.png" alt="image-20190411171620414"></p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/2am2t.png" alt="image-20190411171642533"></p><p>自此，nodejs的事情就完成了，剩下的就是要改造appium-uiautomator2-server的代码，让它能够像UIAutomator1一样监听界面，自动处理。</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>过程：</p><ol><li>本地启动appium</li><li>执行appium脚本测试</li><li>logcat展示监控过程</li></ol><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/ey7js.gif" alt="appium-auto"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎关注我的Appium知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/custom-appium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义Appium之路&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当appium脚本的uiautomationName设置为UiAutomator2时，就会启动appium-uiautomator2-driver这个driver来执行你的脚本测试，而它的系统对话框的处理跟UIAutomator1的就不一样了，更加复杂一点。&lt;/p&gt;
&lt;p&gt;因为UIAutomator2是一个apk形式的，本身可以认为是一个应用，是需要安装的，所以在启动UIAutomator2之前，就会碰到系统对话框的问题，此时，我们需要借助UIAutomator1来做这件事。&lt;/p&gt;
    
    </summary>
    
      <category term="Appium" scheme="http://www.cmlanche.com/categories/Appium/"/>
    
    
      <category term="appium" scheme="http://www.cmlanche.com/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>自定义系统框处理 – 有哪些方法？</title>
    <link href="http://www.cmlanche.com/2019/04/11/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B3%BB%E7%BB%9F%E6%A1%86%E5%A4%84%E7%90%86-%E2%80%93-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95%EF%BC%9F/"/>
    <id>http://www.cmlanche.com/2019/04/11/自定义系统框处理-–-有哪些方法？/</id>
    <published>2019-04-11T08:20:22.000Z</published>
    <updated>2019-04-15T06:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>系统框处理流程有哪些方法？</p><a id="more"></a><h3 id="adb赋予权限"><a href="#adb赋予权限" class="headerlink" title="adb赋予权限"></a>adb赋予权限</h3><ol><li>优点：用户无感知</li><li>缺点：<ol><li>只能解决小部分问题，无法对所有手机和系统版本兼容</li><li>不仅仅是系统<strong>权限</strong>框，<strong>其他弹出的系统框</strong>也要处理，如系统<strong>更新</strong>对话框</li></ol></li></ol><h3 id="单独写appium脚本去处理"><a href="#单独写appium脚本去处理" class="headerlink" title="单独写appium脚本去处理"></a><del>单独写appium脚本去处理</del></h3><p>此方案无法做到，因为权限框处理在脚本之前</p><h3 id="在PC端额外开启一个线程去做权限框处理"><a href="#在PC端额外开启一个线程去做权限框处理" class="headerlink" title="在PC端额外开启一个线程去做权限框处理"></a>在PC端额外开启一个线程去做权限框处理</h3><ol><li>优点：无需改造Appium</li><li>缺点：在pc端额外维护一个处理流程，并且需要不断的去请求dump控件树，再拉取到pc端解析<ol><li>流程过于复杂，不稳定</li><li>处理不及时</li><li>控件树信息塞选可能有漏，无法从根本上解决</li></ol></li></ol><h3 id="自定义appium，添加监控代码，使appium自带这种功能"><a href="#自定义appium，添加监控代码，使appium自带这种功能" class="headerlink" title="自定义appium，添加监控代码，使appium自带这种功能"></a>自定义appium，添加监控代码，使appium自带这种功能</h3><ol><li>优点：深度定制Appium，内置权限框处理<ol><li>内置，有问题可以从根本上解决</li><li>原生，处理速度及时，速度快</li><li>系统框信息自定义配置，有新的无法解决的对话框，可以只修改配置即可**</li></ol></li><li><strong>缺点：</strong><ol><li>需要定制Appium，难度大</li><li>Appium版本更新的话，需要拉取，会有代码上的冲突**</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统框处理流程有哪些方法？&lt;/p&gt;
    
    </summary>
    
      <category term="Appium" scheme="http://www.cmlanche.com/categories/Appium/"/>
    
    
  </entry>
  
  <entry>
    <title>appium的技术架构</title>
    <link href="http://www.cmlanche.com/2019/04/11/appium%E7%9A%84%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.cmlanche.com/2019/04/11/appium的技术架构/</id>
    <published>2019-04-11T07:29:27.000Z</published>
    <updated>2019-04-15T06:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎关注我的Appium知乎专栏：<a href="https://zhuanlan.zhihu.com/custom-appium" target="_blank" rel="noopener">自定义Appium之路</a></p><p>appium是基于nodejs来打包、发布的，也用它来管理各个driver，如下图所示，它的结构图如下：</p><a id="more"></a><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/4y4w5.png" alt="image-20190411154231747"></p><p>从上图就可以看到：<strong>android的自动化比iOS的要难多了！</strong></p><p>appium主程序，依赖各个driver程序，其中，安卓的自动化有3个driver，分别是：</p><ol><li>appium-android-driver - 用于驱动UIAutomator1</li><li>appium-uiautomator2-driver - 用于驱动UIAutomator2</li><li>appium-espresso-driver - 用于驱动Espresso</li></ol><p>列个表对比一下：</p><table><thead><tr><th>功能\Driver</th><th>appium-android-driver</th><th>appium-uiautomator2-driver</th><th>appium-espresso-driver</th></tr></thead><tbody><tr><td>用途</td><td>驱动UIAutomator1</td><td>驱动UIAutomator2</td><td>驱动espresso</td></tr><tr><td>automationName</td><td>UiAutomator1</td><td>UiAutomator2</td><td>Espresso</td></tr><tr><td>包形式</td><td>AppiumBootstrap.jar</td><td>appium-uiautomator2-server-v${version}.apk</td><td>TODO待研究</td></tr><tr><td>包依赖地址</td><td>bootstrap/bin/</td><td>appium-uiautomator2-server/apks/</td><td>TODO</td></tr><tr><td>优点</td><td>jar包形式，免安装，一个命令直接启动，权限级别是shell级别</td><td>官方推荐使用2，对高版本兼容性好</td><td>控件识别能力强</td></tr><tr><td>缺点</td><td>对高版本兼容性差，容易无法识别控件</td><td>apk形式，需要安装</td><td>apk形式，需求安装，并且是侵入式的，可能带来风险</td></tr><tr><td>Server模块</td><td>在相同工程中，Bootstrap目录，maven工程，主要目标是在bin目录下输出AppiumBootstrap.jar</td><td>不同工程，单独的另外一个Nodejs工程：appium-uiautomator2-server</td><td>相同Nodejs工程，espress-server目录，gradle工程</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎关注我的Appium知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/custom-appium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义Appium之路&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;appium是基于nodejs来打包、发布的，也用它来管理各个driver，如下图所示，它的结构图如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Appium" scheme="http://www.cmlanche.com/categories/Appium/"/>
    
    
      <category term="appium" scheme="http://www.cmlanche.com/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>给 Appium 内置系统对话框处理吧！appium-android-driver 篇</title>
    <link href="http://www.cmlanche.com/2019/04/11/Appium%E7%9A%84UIAutomator1%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E6%A1%86%E5%A4%84%E7%90%86/"/>
    <id>http://www.cmlanche.com/2019/04/11/Appium的UIAutomator1的自定义权限框处理/</id>
    <published>2019-04-11T07:18:46.000Z</published>
    <updated>2019-04-15T06:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎关注我的Appium知乎专栏：<a href="https://zhuanlan.zhihu.com/custom-appium" target="_blank" rel="noopener">自定义Appium之路</a></p><p>当Appium脚本中的uiautomationName设置为UiAutomator1时，会启动UIAutomator1的Driver来测试你的Appium脚本，在脚本之前之前，会有很多权限框弹出，此时就需要我们的UIAutomator1来自动处理这样的对话框，并且要在安装apk之前就启动UIAutomator1的服务。</p><p>很不幸，appium的代码中，是先安装Appium Setting APK和被测应用的，那怎么改呢？</p><a id="more"></a><p>我们找到appium-android-driver工程，找打lib/driver.js，然后找到startAndroidSession方法，将如下代码提到这个方法的最前面：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// start UiAutomator （改动：优先启动UIAutomator1）</span></span><br><span class="line"><span class="keyword">this</span>.bootstrap = <span class="keyword">new</span> helpers.bootstrap(<span class="keyword">this</span>.adb, <span class="keyword">this</span>.bootstrapPort, <span class="keyword">this</span>.opts.websocket);</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.bootstrap.start(<span class="keyword">this</span>.opts.appPackage, <span class="keyword">this</span>.opts.disableAndroidWatchers, <span class="keyword">this</span>.opts.acceptSslCerts);</span><br><span class="line"><span class="comment">// handling unexpected shutdown</span></span><br><span class="line"><span class="keyword">this</span>.bootstrap.onUnexpectedShutdown.catch(<span class="keyword">async</span> (err) =&gt; &#123; <span class="comment">// eslint-disable-line promise/prefer-await-to-callbacks</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.bootstrap.ignoreUnexpectedShutdown) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.startUnexpectedShutdown(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/5vr6h.png" alt="image-20190411164422233"></p><p>经过测试，这样不会影响UIAutomator1的正常启动，不会带来负面影响。</p><p>既然都优先启动了，我们就要让UIAutomator1去监控手机界面了。</p><p>不幸的是，Appium并没有给我们写类似的监听代码，我们得自己动手了，其实很简单，大体思路就是，dump控件树，检测界面控件，检测到权限框，就点”允许”、”是”之类的，这里就需要不断的枚举了。国内手机产商众多，android版本也多，这里就有大量的工作要做了。</p><p>幸运的是，Appium给我们做好了监控的线程，只是空实现，基本啥都没干，代码在SocketServer.java的listenForever中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenForever</span><span class="params">(<span class="keyword">boolean</span> disableAndroidWatchers, <span class="keyword">boolean</span> acceptSSLCerts)</span> <span class="keyword">throws</span> SocketServerException </span>&#123;</span><br><span class="line">  Logger.debug(<span class="string">"Appium Socket Server Ready"</span>);</span><br><span class="line">  UpdateStrings.loadStringsJson();</span><br><span class="line">  <span class="keyword">if</span> (disableAndroidWatchers) &#123;</span><br><span class="line">    Logger.debug(<span class="string">"Skipped registering crash watchers."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dismissCrashAlerts();</span><br><span class="line">    <span class="comment">// 看这里，就是这个每隔100毫秒触发一次的check !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">    <span class="keyword">final</span> TimerTask updateWatchers = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          watchers.check();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    timer.scheduleAtFixedRate(updateWatchers, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (acceptSSLCerts) &#123;</span><br><span class="line">    Logger.debug(<span class="string">"Accepting SSL certificate errors."</span>);</span><br><span class="line">    acceptSSLCertificates();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    client = server.accept();</span><br><span class="line">    Logger.debug(<span class="string">"Client connected"</span>);</span><br><span class="line">    in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">    out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(client.getOutputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">    <span class="keyword">while</span> (keepListening) &#123;</span><br><span class="line">      handleClientData();</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">    client.close();</span><br><span class="line">    Logger.debug(<span class="string">"Closed client connection"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SocketServerException(<span class="string">"Error when client was trying to connect"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎关注我的Appium知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/custom-appium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义Appium之路&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当Appium脚本中的uiautomationName设置为UiAutomator1时，会启动UIAutomator1的Driver来测试你的Appium脚本，在脚本之前之前，会有很多权限框弹出，此时就需要我们的UIAutomator1来自动处理这样的对话框，并且要在安装apk之前就启动UIAutomator1的服务。&lt;/p&gt;
&lt;p&gt;很不幸，appium的代码中，是先安装Appium Setting APK和被测应用的，那怎么改呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Appium" scheme="http://www.cmlanche.com/categories/Appium/"/>
    
    
      <category term="appium" scheme="http://www.cmlanche.com/tags/appium/"/>
    
      <category term="uiautomator" scheme="http://www.cmlanche.com/tags/uiautomator/"/>
    
  </entry>
  
  <entry>
    <title>独立开发者的开放心态：帮助他人，其实就是在帮你自己！</title>
    <link href="http://www.cmlanche.com/2019/04/11/Open%E5%BF%83%E6%80%81/"/>
    <id>http://www.cmlanche.com/2019/04/11/Open心态/</id>
    <published>2019-04-11T03:01:19.000Z</published>
    <updated>2019-04-15T06:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>不要怕被抄袭，心态要开放，往往收获会更多</li><li>理念：你身边的朋友都富有了，你才更有机会富有；帮助他人，其实就是帮你自己！</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;不要怕被抄袭，心态要开放，往往收获会更多&lt;/li&gt;
&lt;li&gt;理念：你身边的朋友都富有了，你才更有机会富有；帮助他人，其实就是帮你自己！&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/categories/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
    
      <category term="独立开发者" scheme="http://www.cmlanche.com/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>appium怎么本地执行、调试</title>
    <link href="http://www.cmlanche.com/2019/04/09/appium%E6%80%8E%E4%B9%88%E6%9C%AC%E5%9C%B0%E6%89%A7%E8%A1%8C%E3%80%81%E8%B0%83%E8%AF%95/"/>
    <id>http://www.cmlanche.com/2019/04/09/appium怎么本地执行、调试/</id>
    <published>2019-04-09T06:36:34.000Z</published>
    <updated>2019-04-15T06:15:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎关注我的Appium知乎专栏：<a href="https://zhuanlan.zhihu.com/custom-appium" target="_blank" rel="noopener">自定义Appium之路</a></p><h3 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h3><p>通常的执行方式是：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 下载npm库中的appium</span><br><span class="line">npm i -g appium </span><br><span class="line"><span class="meta">#</span> 启动appium服务器</span><br><span class="line">appium</span><br></pre></td></tr></table></figure><p>但如果是本地appium代码怎么执行呢？请看如下shell脚本</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 克隆appium代码</span><br><span class="line">git clone https://github.com/appium/appium.git</span><br><span class="line"><span class="meta">#</span> 安装依赖</span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span> 编译</span><br><span class="line">gulp transpile</span><br><span class="line"><span class="meta">#</span> 本地启动appium</span><br><span class="line">./build/lib/main.js</span><br></pre></td></tr></table></figure><p>只查看AndroidDriver的日志怎么做？</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./build/lib/main.js | grep AndroidDriver</span><br></pre></td></tr></table></figure><h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><ol><li><p>配置VS Code的调试器</p><p>按F5，打开调试器，选择node.js，会生成一个launch.json的配置文件，这个配置文件用来启动程序的:</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Appium"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/appium/build/lib/main.js"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置好launch.json之后，启动调试，会出现如下工具栏：</p><p><img src="https://cmlanche-1251406926.cos.ap-guangzhou.myqcloud.com/blog/a56nt.png" alt="image-20190409150446005"></p><p>其含义分别是：继续执行、单步到下一步、跳转到里面、跳出、重启、停止。</p></li></ol><h3 id="本地其他库的调试"><a href="#本地其他库的调试" class="headerlink" title="本地其他库的调试"></a>本地其他库的调试</h3><h5 id="方法1：npm-link-创建软链"><a href="#方法1：npm-link-创建软链" class="headerlink" title="方法1：npm link 创建软链"></a>方法1：npm link 创建软链</h5><p>通过上面的配置，我们可以调试appium工程，但是本地其他工程无法调试，因为都是直接走的依赖库，此时我们只需要用link命令就可以完成本地库与实际依赖库的关联。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm link ../appium-android-driver</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdeMacBook-Pro:appium cmlanche$ npm link ../appium-android-driver</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> appium-android-driver-cmext@4.11.0-20190409a prepare /Users/cmlanche/sourcetree/appium/appium-android-driver</span><br><span class="line"><span class="meta">&gt;</span> gulp prepublish</span><br><span class="line"></span><br><span class="line">[15:50:55] Using gulpfile ~/sourcetree/appium/appium-android-driver/gulpfile.js</span><br><span class="line">[15:50:55] Starting 'prepublish'...</span><br><span class="line">[15:50:55] Starting 'clean'...</span><br><span class="line">[15:50:55] Finished 'clean' after 71 ms</span><br><span class="line">[15:50:55] Starting 'transpile'...</span><br><span class="line">[15:50:59] Finished 'transpile' after 3.75 s</span><br><span class="line">[15:50:59] Finished 'prepublish' after 3.83 s</span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">audited 29538 packages in 14.08s</span><br><span class="line">found 2 moderate severity vulnerabilities</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` for details</span><br><span class="line">/usr/local/lib/node_modules/appium-android-driver-cmext -&gt; /Users/cmlanche/sourcetree/appium/appium-android-driver</span><br><span class="line">/Users/cmlanche/sourcetree/appium/appium/node_modules/appium-android-driver-cmext -&gt; /usr/local/lib/node_modules/appium-android-driver-cmext -&gt; /Users/cmlanche/sourcetree/appium/appium-android-driver</span><br></pre></td></tr></table></figure><h5 id="方法2：依赖本地仓库"><a href="#方法2：依赖本地仓库" class="headerlink" title="方法2：依赖本地仓库"></a>方法2：依赖本地仓库</h5><p>切换到appium工程目录下，安装我自定义的uiautomator2-driver</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i appium-uiautomator2-driver-cmext@"file:../appium-uiautomator2-driver"</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengmingdeMacBook-Pro:appium cmlanche$ npm i appium-uiautomator2-driver-cmext@"file:../appium-uiautomator2-driver"</span><br><span class="line">+ appium-uiautomator2-driver-cmext@1.33.0-20190410f</span><br><span class="line">removed 1 package and updated 1 package in 24.494s</span><br></pre></td></tr></table></figure><p>当本地库修改后，运行<code>npm i</code>重新编译一下，就可以继续调试了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎关注我的Appium知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/custom-appium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义Appium之路&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;本地执行&quot;&gt;&lt;a href=&quot;#本地执行&quot; class=&quot;headerlink&quot; title=&quot;本地执行&quot;&gt;&lt;/a&gt;本地执行&lt;/h3&gt;&lt;p&gt;通常的执行方式是：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 下载npm库中的appium&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i -g appium &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 启动appium服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appium&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果是本地appium代码怎么执行呢？请看如下shell脚本&lt;/p&gt;
    
    </summary>
    
      <category term="Appium" scheme="http://www.cmlanche.com/categories/Appium/"/>
    
    
  </entry>
  
</feed>
